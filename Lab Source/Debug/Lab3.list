
Lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f84  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080030b4  080030b4  0002003c  2**0
                  CONTENTS
  4 .ARM          00000000  080030b4  080030b4  0002003c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080030b4  080030b4  0002003c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080030b4  080030b4  000130b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080030b8  080030b8  000130b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000003c  20000000  080030bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c0  2000003c  080030f8  0002003c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080030f8  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000097a7  00000000  00000000  00020065  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b37  00000000  00000000  0002980c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa0  00000000  00000000  0002b348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000990  00000000  00000000  0002bde8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016eb5  00000000  00000000  0002c778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c461  00000000  00000000  0004362d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008239b  00000000  00000000  0004fa8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000d1e29  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000029d8  00000000  00000000  000d1e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000003c 	.word	0x2000003c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003078 	.word	0x08003078

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000040 	.word	0x20000040
 8000148:	08003078 	.word	0x08003078

0800014c <isButton1Pressed>:
int TimeOutForKeyPress =  0;
int button1_flag = 0;
int button2_flag = 0;
int button3_flag = 0;

int isButton1Pressed(){
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
	if(button1_flag == 1){
 8000150:	4b06      	ldr	r3, [pc, #24]	; (800016c <isButton1Pressed+0x20>)
 8000152:	681b      	ldr	r3, [r3, #0]
 8000154:	2b01      	cmp	r3, #1
 8000156:	d104      	bne.n	8000162 <isButton1Pressed+0x16>
		button1_flag = 0;
 8000158:	4b04      	ldr	r3, [pc, #16]	; (800016c <isButton1Pressed+0x20>)
 800015a:	2200      	movs	r2, #0
 800015c:	601a      	str	r2, [r3, #0]
		return 1;
 800015e:	2301      	movs	r3, #1
 8000160:	e000      	b.n	8000164 <isButton1Pressed+0x18>
	}
	return 0;
 8000162:	2300      	movs	r3, #0
}
 8000164:	4618      	mov	r0, r3
 8000166:	46bd      	mov	sp, r7
 8000168:	bc80      	pop	{r7}
 800016a:	4770      	bx	lr
 800016c:	2000005c 	.word	0x2000005c

08000170 <isButton2Pressed>:
int isButton2Pressed(){
 8000170:	b480      	push	{r7}
 8000172:	af00      	add	r7, sp, #0
	if(button2_flag == 1){
 8000174:	4b06      	ldr	r3, [pc, #24]	; (8000190 <isButton2Pressed+0x20>)
 8000176:	681b      	ldr	r3, [r3, #0]
 8000178:	2b01      	cmp	r3, #1
 800017a:	d104      	bne.n	8000186 <isButton2Pressed+0x16>
		button2_flag = 0;
 800017c:	4b04      	ldr	r3, [pc, #16]	; (8000190 <isButton2Pressed+0x20>)
 800017e:	2200      	movs	r2, #0
 8000180:	601a      	str	r2, [r3, #0]
		return 1;
 8000182:	2301      	movs	r3, #1
 8000184:	e000      	b.n	8000188 <isButton2Pressed+0x18>
	}
	return 0;
 8000186:	2300      	movs	r3, #0
}
 8000188:	4618      	mov	r0, r3
 800018a:	46bd      	mov	sp, r7
 800018c:	bc80      	pop	{r7}
 800018e:	4770      	bx	lr
 8000190:	20000060 	.word	0x20000060

08000194 <isButton3Pressed>:
int isButton3Pressed(){
 8000194:	b480      	push	{r7}
 8000196:	af00      	add	r7, sp, #0
	if(button3_flag == 1){
 8000198:	4b06      	ldr	r3, [pc, #24]	; (80001b4 <isButton3Pressed+0x20>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	2b01      	cmp	r3, #1
 800019e:	d104      	bne.n	80001aa <isButton3Pressed+0x16>
		button3_flag = 0;
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <isButton3Pressed+0x20>)
 80001a2:	2200      	movs	r2, #0
 80001a4:	601a      	str	r2, [r3, #0]
		return 1;
 80001a6:	2301      	movs	r3, #1
 80001a8:	e000      	b.n	80001ac <isButton3Pressed+0x18>
	}
	return 0;
 80001aa:	2300      	movs	r3, #0
}
 80001ac:	4618      	mov	r0, r3
 80001ae:	46bd      	mov	sp, r7
 80001b0:	bc80      	pop	{r7}
 80001b2:	4770      	bx	lr
 80001b4:	20000064 	.word	0x20000064

080001b8 <subKeyProcess1>:

void subKeyProcess1(){
 80001b8:	b480      	push	{r7}
 80001ba:	af00      	add	r7, sp, #0
	button1_flag=1;
 80001bc:	4b03      	ldr	r3, [pc, #12]	; (80001cc <subKeyProcess1+0x14>)
 80001be:	2201      	movs	r2, #1
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	46bd      	mov	sp, r7
 80001c6:	bc80      	pop	{r7}
 80001c8:	4770      	bx	lr
 80001ca:	bf00      	nop
 80001cc:	2000005c 	.word	0x2000005c

080001d0 <subKeyProcess2>:
void subKeyProcess2(){
 80001d0:	b480      	push	{r7}
 80001d2:	af00      	add	r7, sp, #0
	button2_flag=1;
 80001d4:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <subKeyProcess2+0x14>)
 80001d6:	2201      	movs	r2, #1
 80001d8:	601a      	str	r2, [r3, #0]
}
 80001da:	bf00      	nop
 80001dc:	46bd      	mov	sp, r7
 80001de:	bc80      	pop	{r7}
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	20000060 	.word	0x20000060

080001e8 <subKeyProcess3>:
void subKeyProcess3(){
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
	button3_flag=1;
 80001ec:	4b03      	ldr	r3, [pc, #12]	; (80001fc <subKeyProcess3+0x14>)
 80001ee:	2201      	movs	r2, #1
 80001f0:	601a      	str	r2, [r3, #0]
}
 80001f2:	bf00      	nop
 80001f4:	46bd      	mov	sp, r7
 80001f6:	bc80      	pop	{r7}
 80001f8:	4770      	bx	lr
 80001fa:	bf00      	nop
 80001fc:	20000064 	.word	0x20000064

08000200 <getKeyInput1>:


void getKeyInput1(){
 8000200:	b580      	push	{r7, lr}
 8000202:	af00      	add	r7, sp, #0
  KeyReg2[0] = KeyReg1[0];
 8000204:	4b23      	ldr	r3, [pc, #140]	; (8000294 <getKeyInput1+0x94>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a23      	ldr	r2, [pc, #140]	; (8000298 <getKeyInput1+0x98>)
 800020a:	6013      	str	r3, [r2, #0]
  KeyReg1[0] = KeyReg0[0];
 800020c:	4b23      	ldr	r3, [pc, #140]	; (800029c <getKeyInput1+0x9c>)
 800020e:	681b      	ldr	r3, [r3, #0]
 8000210:	4a20      	ldr	r2, [pc, #128]	; (8000294 <getKeyInput1+0x94>)
 8000212:	6013      	str	r3, [r2, #0]
  //Add your button here
  KeyReg0[0] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13);
 8000214:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000218:	4821      	ldr	r0, [pc, #132]	; (80002a0 <getKeyInput1+0xa0>)
 800021a:	f001 fef5 	bl	8002008 <HAL_GPIO_ReadPin>
 800021e:	4603      	mov	r3, r0
 8000220:	461a      	mov	r2, r3
 8000222:	4b1e      	ldr	r3, [pc, #120]	; (800029c <getKeyInput1+0x9c>)
 8000224:	601a      	str	r2, [r3, #0]

  if ((KeyReg1[0] == KeyReg0[0]) && (KeyReg1[0] == KeyReg2[0])){
 8000226:	4b1b      	ldr	r3, [pc, #108]	; (8000294 <getKeyInput1+0x94>)
 8000228:	681a      	ldr	r2, [r3, #0]
 800022a:	4b1c      	ldr	r3, [pc, #112]	; (800029c <getKeyInput1+0x9c>)
 800022c:	681b      	ldr	r3, [r3, #0]
 800022e:	429a      	cmp	r2, r3
 8000230:	d12d      	bne.n	800028e <getKeyInput1+0x8e>
 8000232:	4b18      	ldr	r3, [pc, #96]	; (8000294 <getKeyInput1+0x94>)
 8000234:	681a      	ldr	r2, [r3, #0]
 8000236:	4b18      	ldr	r3, [pc, #96]	; (8000298 <getKeyInput1+0x98>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	429a      	cmp	r2, r3
 800023c:	d127      	bne.n	800028e <getKeyInput1+0x8e>
    if (KeyReg2[0] != KeyReg3[0]){
 800023e:	4b16      	ldr	r3, [pc, #88]	; (8000298 <getKeyInput1+0x98>)
 8000240:	681a      	ldr	r2, [r3, #0]
 8000242:	4b18      	ldr	r3, [pc, #96]	; (80002a4 <getKeyInput1+0xa4>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	429a      	cmp	r2, r3
 8000248:	d012      	beq.n	8000270 <getKeyInput1+0x70>
      KeyReg3[0] = KeyReg2[0];
 800024a:	4b13      	ldr	r3, [pc, #76]	; (8000298 <getKeyInput1+0x98>)
 800024c:	681b      	ldr	r3, [r3, #0]
 800024e:	4a15      	ldr	r2, [pc, #84]	; (80002a4 <getKeyInput1+0xa4>)
 8000250:	6013      	str	r3, [r2, #0]

      if (KeyReg0[0] == PRESSED_STATE){
 8000252:	4b12      	ldr	r3, [pc, #72]	; (800029c <getKeyInput1+0x9c>)
 8000254:	681b      	ldr	r3, [r3, #0]
 8000256:	2b00      	cmp	r3, #0
 8000258:	d106      	bne.n	8000268 <getKeyInput1+0x68>
        TimeOutForKeyPress = 500;
 800025a:	4b13      	ldr	r3, [pc, #76]	; (80002a8 <getKeyInput1+0xa8>)
 800025c:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000260:	601a      	str	r2, [r3, #0]
        subKeyProcess1();
 8000262:	f7ff ffa9 	bl	80001b8 <subKeyProcess1>
    			TimeOutForKeyPress = 500;
    			subKeyProcess1();
    		}
    }
  }
}
 8000266:	e012      	b.n	800028e <getKeyInput1+0x8e>
    	  TimeOutForKeyPress = 0;
 8000268:	4b0f      	ldr	r3, [pc, #60]	; (80002a8 <getKeyInput1+0xa8>)
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
}
 800026e:	e00e      	b.n	800028e <getKeyInput1+0x8e>
    		TimeOutForKeyPress--;
 8000270:	4b0d      	ldr	r3, [pc, #52]	; (80002a8 <getKeyInput1+0xa8>)
 8000272:	681b      	ldr	r3, [r3, #0]
 8000274:	3b01      	subs	r3, #1
 8000276:	4a0c      	ldr	r2, [pc, #48]	; (80002a8 <getKeyInput1+0xa8>)
 8000278:	6013      	str	r3, [r2, #0]
    		if (TimeOutForKeyPress == 0){
 800027a:	4b0b      	ldr	r3, [pc, #44]	; (80002a8 <getKeyInput1+0xa8>)
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	2b00      	cmp	r3, #0
 8000280:	d105      	bne.n	800028e <getKeyInput1+0x8e>
    			TimeOutForKeyPress = 500;
 8000282:	4b09      	ldr	r3, [pc, #36]	; (80002a8 <getKeyInput1+0xa8>)
 8000284:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000288:	601a      	str	r2, [r3, #0]
    			subKeyProcess1();
 800028a:	f7ff ff95 	bl	80001b8 <subKeyProcess1>
}
 800028e:	bf00      	nop
 8000290:	bd80      	pop	{r7, pc}
 8000292:	bf00      	nop
 8000294:	2000000c 	.word	0x2000000c
 8000298:	20000018 	.word	0x20000018
 800029c:	20000000 	.word	0x20000000
 80002a0:	40011000 	.word	0x40011000
 80002a4:	20000024 	.word	0x20000024
 80002a8:	20000058 	.word	0x20000058

080002ac <getKeyInput2>:

void getKeyInput2(){
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
  KeyReg2[1] = KeyReg1[1];
 80002b0:	4b23      	ldr	r3, [pc, #140]	; (8000340 <getKeyInput2+0x94>)
 80002b2:	685b      	ldr	r3, [r3, #4]
 80002b4:	4a23      	ldr	r2, [pc, #140]	; (8000344 <getKeyInput2+0x98>)
 80002b6:	6053      	str	r3, [r2, #4]
  KeyReg1[1] = KeyReg0[1];
 80002b8:	4b23      	ldr	r3, [pc, #140]	; (8000348 <getKeyInput2+0x9c>)
 80002ba:	685b      	ldr	r3, [r3, #4]
 80002bc:	4a20      	ldr	r2, [pc, #128]	; (8000340 <getKeyInput2+0x94>)
 80002be:	6053      	str	r3, [r2, #4]
  //Add your button here
  KeyReg0[1] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_14);
 80002c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80002c4:	4821      	ldr	r0, [pc, #132]	; (800034c <getKeyInput2+0xa0>)
 80002c6:	f001 fe9f 	bl	8002008 <HAL_GPIO_ReadPin>
 80002ca:	4603      	mov	r3, r0
 80002cc:	461a      	mov	r2, r3
 80002ce:	4b1e      	ldr	r3, [pc, #120]	; (8000348 <getKeyInput2+0x9c>)
 80002d0:	605a      	str	r2, [r3, #4]

  if ((KeyReg1[1] == KeyReg0[1]) && (KeyReg1[1] == KeyReg2[1])){
 80002d2:	4b1b      	ldr	r3, [pc, #108]	; (8000340 <getKeyInput2+0x94>)
 80002d4:	685a      	ldr	r2, [r3, #4]
 80002d6:	4b1c      	ldr	r3, [pc, #112]	; (8000348 <getKeyInput2+0x9c>)
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	429a      	cmp	r2, r3
 80002dc:	d12d      	bne.n	800033a <getKeyInput2+0x8e>
 80002de:	4b18      	ldr	r3, [pc, #96]	; (8000340 <getKeyInput2+0x94>)
 80002e0:	685a      	ldr	r2, [r3, #4]
 80002e2:	4b18      	ldr	r3, [pc, #96]	; (8000344 <getKeyInput2+0x98>)
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	429a      	cmp	r2, r3
 80002e8:	d127      	bne.n	800033a <getKeyInput2+0x8e>
    if (KeyReg2[1] != KeyReg3[1]){
 80002ea:	4b16      	ldr	r3, [pc, #88]	; (8000344 <getKeyInput2+0x98>)
 80002ec:	685a      	ldr	r2, [r3, #4]
 80002ee:	4b18      	ldr	r3, [pc, #96]	; (8000350 <getKeyInput2+0xa4>)
 80002f0:	685b      	ldr	r3, [r3, #4]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d012      	beq.n	800031c <getKeyInput2+0x70>
      KeyReg3[1] = KeyReg2[1];
 80002f6:	4b13      	ldr	r3, [pc, #76]	; (8000344 <getKeyInput2+0x98>)
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	4a15      	ldr	r2, [pc, #84]	; (8000350 <getKeyInput2+0xa4>)
 80002fc:	6053      	str	r3, [r2, #4]

      if (KeyReg0[1] == PRESSED_STATE){
 80002fe:	4b12      	ldr	r3, [pc, #72]	; (8000348 <getKeyInput2+0x9c>)
 8000300:	685b      	ldr	r3, [r3, #4]
 8000302:	2b00      	cmp	r3, #0
 8000304:	d106      	bne.n	8000314 <getKeyInput2+0x68>
        TimeOutForKeyPress = 500;
 8000306:	4b13      	ldr	r3, [pc, #76]	; (8000354 <getKeyInput2+0xa8>)
 8000308:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800030c:	601a      	str	r2, [r3, #0]
        subKeyProcess2();
 800030e:	f7ff ff5f 	bl	80001d0 <subKeyProcess2>
    			TimeOutForKeyPress = 500;
    			subKeyProcess2();
    		}
    }
  }
}
 8000312:	e012      	b.n	800033a <getKeyInput2+0x8e>
    	  TimeOutForKeyPress = 0;
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <getKeyInput2+0xa8>)
 8000316:	2200      	movs	r2, #0
 8000318:	601a      	str	r2, [r3, #0]
}
 800031a:	e00e      	b.n	800033a <getKeyInput2+0x8e>
    		TimeOutForKeyPress--;
 800031c:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <getKeyInput2+0xa8>)
 800031e:	681b      	ldr	r3, [r3, #0]
 8000320:	3b01      	subs	r3, #1
 8000322:	4a0c      	ldr	r2, [pc, #48]	; (8000354 <getKeyInput2+0xa8>)
 8000324:	6013      	str	r3, [r2, #0]
    		if (TimeOutForKeyPress == 0){
 8000326:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <getKeyInput2+0xa8>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d105      	bne.n	800033a <getKeyInput2+0x8e>
    			TimeOutForKeyPress = 500;
 800032e:	4b09      	ldr	r3, [pc, #36]	; (8000354 <getKeyInput2+0xa8>)
 8000330:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000334:	601a      	str	r2, [r3, #0]
    			subKeyProcess2();
 8000336:	f7ff ff4b 	bl	80001d0 <subKeyProcess2>
}
 800033a:	bf00      	nop
 800033c:	bd80      	pop	{r7, pc}
 800033e:	bf00      	nop
 8000340:	2000000c 	.word	0x2000000c
 8000344:	20000018 	.word	0x20000018
 8000348:	20000000 	.word	0x20000000
 800034c:	40011000 	.word	0x40011000
 8000350:	20000024 	.word	0x20000024
 8000354:	20000058 	.word	0x20000058

08000358 <getKeyInput3>:

void getKeyInput3(){
 8000358:	b580      	push	{r7, lr}
 800035a:	af00      	add	r7, sp, #0
  KeyReg2[2] = KeyReg1[2];
 800035c:	4b23      	ldr	r3, [pc, #140]	; (80003ec <getKeyInput3+0x94>)
 800035e:	689b      	ldr	r3, [r3, #8]
 8000360:	4a23      	ldr	r2, [pc, #140]	; (80003f0 <getKeyInput3+0x98>)
 8000362:	6093      	str	r3, [r2, #8]
  KeyReg1[2] = KeyReg0[2];
 8000364:	4b23      	ldr	r3, [pc, #140]	; (80003f4 <getKeyInput3+0x9c>)
 8000366:	689b      	ldr	r3, [r3, #8]
 8000368:	4a20      	ldr	r2, [pc, #128]	; (80003ec <getKeyInput3+0x94>)
 800036a:	6093      	str	r3, [r2, #8]
  //Add your button here
  KeyReg0[2] = HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_15);
 800036c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000370:	4821      	ldr	r0, [pc, #132]	; (80003f8 <getKeyInput3+0xa0>)
 8000372:	f001 fe49 	bl	8002008 <HAL_GPIO_ReadPin>
 8000376:	4603      	mov	r3, r0
 8000378:	461a      	mov	r2, r3
 800037a:	4b1e      	ldr	r3, [pc, #120]	; (80003f4 <getKeyInput3+0x9c>)
 800037c:	609a      	str	r2, [r3, #8]

  if ((KeyReg1[2] == KeyReg0[2]) && (KeyReg1[2] == KeyReg2[2])){
 800037e:	4b1b      	ldr	r3, [pc, #108]	; (80003ec <getKeyInput3+0x94>)
 8000380:	689a      	ldr	r2, [r3, #8]
 8000382:	4b1c      	ldr	r3, [pc, #112]	; (80003f4 <getKeyInput3+0x9c>)
 8000384:	689b      	ldr	r3, [r3, #8]
 8000386:	429a      	cmp	r2, r3
 8000388:	d12d      	bne.n	80003e6 <getKeyInput3+0x8e>
 800038a:	4b18      	ldr	r3, [pc, #96]	; (80003ec <getKeyInput3+0x94>)
 800038c:	689a      	ldr	r2, [r3, #8]
 800038e:	4b18      	ldr	r3, [pc, #96]	; (80003f0 <getKeyInput3+0x98>)
 8000390:	689b      	ldr	r3, [r3, #8]
 8000392:	429a      	cmp	r2, r3
 8000394:	d127      	bne.n	80003e6 <getKeyInput3+0x8e>
    if (KeyReg2[2] != KeyReg3[2]){
 8000396:	4b16      	ldr	r3, [pc, #88]	; (80003f0 <getKeyInput3+0x98>)
 8000398:	689a      	ldr	r2, [r3, #8]
 800039a:	4b18      	ldr	r3, [pc, #96]	; (80003fc <getKeyInput3+0xa4>)
 800039c:	689b      	ldr	r3, [r3, #8]
 800039e:	429a      	cmp	r2, r3
 80003a0:	d012      	beq.n	80003c8 <getKeyInput3+0x70>
      KeyReg3[2] = KeyReg2[2];
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <getKeyInput3+0x98>)
 80003a4:	689b      	ldr	r3, [r3, #8]
 80003a6:	4a15      	ldr	r2, [pc, #84]	; (80003fc <getKeyInput3+0xa4>)
 80003a8:	6093      	str	r3, [r2, #8]

      if (KeyReg0[2] == PRESSED_STATE){
 80003aa:	4b12      	ldr	r3, [pc, #72]	; (80003f4 <getKeyInput3+0x9c>)
 80003ac:	689b      	ldr	r3, [r3, #8]
 80003ae:	2b00      	cmp	r3, #0
 80003b0:	d106      	bne.n	80003c0 <getKeyInput3+0x68>
        TimeOutForKeyPress = 500;
 80003b2:	4b13      	ldr	r3, [pc, #76]	; (8000400 <getKeyInput3+0xa8>)
 80003b4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003b8:	601a      	str	r2, [r3, #0]
        subKeyProcess3();
 80003ba:	f7ff ff15 	bl	80001e8 <subKeyProcess3>
    			TimeOutForKeyPress = 500;
    			subKeyProcess3();
    		}
    }
  }
}
 80003be:	e012      	b.n	80003e6 <getKeyInput3+0x8e>
    	  TimeOutForKeyPress = 0;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <getKeyInput3+0xa8>)
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
}
 80003c6:	e00e      	b.n	80003e6 <getKeyInput3+0x8e>
    		TimeOutForKeyPress--;
 80003c8:	4b0d      	ldr	r3, [pc, #52]	; (8000400 <getKeyInput3+0xa8>)
 80003ca:	681b      	ldr	r3, [r3, #0]
 80003cc:	3b01      	subs	r3, #1
 80003ce:	4a0c      	ldr	r2, [pc, #48]	; (8000400 <getKeyInput3+0xa8>)
 80003d0:	6013      	str	r3, [r2, #0]
    		if (TimeOutForKeyPress == 0){
 80003d2:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <getKeyInput3+0xa8>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	2b00      	cmp	r3, #0
 80003d8:	d105      	bne.n	80003e6 <getKeyInput3+0x8e>
    			TimeOutForKeyPress = 500;
 80003da:	4b09      	ldr	r3, [pc, #36]	; (8000400 <getKeyInput3+0xa8>)
 80003dc:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80003e0:	601a      	str	r2, [r3, #0]
    			subKeyProcess3();
 80003e2:	f7ff ff01 	bl	80001e8 <subKeyProcess3>
}
 80003e6:	bf00      	nop
 80003e8:	bd80      	pop	{r7, pc}
 80003ea:	bf00      	nop
 80003ec:	2000000c 	.word	0x2000000c
 80003f0:	20000018 	.word	0x20000018
 80003f4:	20000000 	.word	0x20000000
 80003f8:	40011000 	.word	0x40011000
 80003fc:	20000024 	.word	0x20000024
 8000400:	20000058 	.word	0x20000058

08000404 <fsm_automatic_run>:
 *      Author: PC
 */

#include "global.h"

void fsm_automatic_run() {
 8000404:	b580      	push	{r7, lr}
 8000406:	af00      	add	r7, sp, #0
	switch(led_status){
 8000408:	4b99      	ldr	r3, [pc, #612]	; (8000670 <fsm_automatic_run+0x26c>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3b01      	subs	r3, #1
 800040e:	2b07      	cmp	r3, #7
 8000410:	f200 8122 	bhi.w	8000658 <fsm_automatic_run+0x254>
 8000414:	a201      	add	r2, pc, #4	; (adr r2, 800041c <fsm_automatic_run+0x18>)
 8000416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800041a:	bf00      	nop
 800041c:	0800043d 	.word	0x0800043d
 8000420:	08000659 	.word	0x08000659
 8000424:	08000659 	.word	0x08000659
 8000428:	0800046d 	.word	0x0800046d
 800042c:	08000659 	.word	0x08000659
 8000430:	080004e9 	.word	0x080004e9
 8000434:	08000565 	.word	0x08000565
 8000438:	080005df 	.word	0x080005df
	case INIT:
		led_status = AUTO_RED_GREEN;
 800043c:	4b8c      	ldr	r3, [pc, #560]	; (8000670 <fsm_automatic_run+0x26c>)
 800043e:	2204      	movs	r2, #4
 8000440:	601a      	str	r2, [r3, #0]
		setTimer1((GREEN+counter_green)*100);
 8000442:	4b8c      	ldr	r3, [pc, #560]	; (8000674 <fsm_automatic_run+0x270>)
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	3303      	adds	r3, #3
 8000448:	2264      	movs	r2, #100	; 0x64
 800044a:	fb02 f303 	mul.w	r3, r2, r3
 800044e:	4618      	mov	r0, r3
 8000450:	f001 f9be 	bl	80017d0 <setTimer1>
		updateBuffer1(led_status_1);
 8000454:	4b88      	ldr	r3, [pc, #544]	; (8000678 <fsm_automatic_run+0x274>)
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	4618      	mov	r0, r3
 800045a:	f000 fec3 	bl	80011e4 <updateBuffer1>
		setTimer2(100);
 800045e:	2064      	movs	r0, #100	; 0x64
 8000460:	f001 f9ca 	bl	80017f8 <setTimer2>
		setTimer3(20);
 8000464:	2014      	movs	r0, #20
 8000466:	f001 f9db 	bl	8001820 <setTimer3>
		break;
 800046a:	e0fe      	b.n	800066a <fsm_automatic_run+0x266>

	case AUTO_RED_GREEN:

		if (timer1_flag == 1) {
 800046c:	4b83      	ldr	r3, [pc, #524]	; (800067c <fsm_automatic_run+0x278>)
 800046e:	681b      	ldr	r3, [r3, #0]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d10b      	bne.n	800048c <fsm_automatic_run+0x88>
			led_status = AUTO_RED_YELLOW;
 8000474:	4b7e      	ldr	r3, [pc, #504]	; (8000670 <fsm_automatic_run+0x26c>)
 8000476:	2206      	movs	r2, #6
 8000478:	601a      	str	r2, [r3, #0]
			setTimer1((YELLOW+counter_yellow)*100);
 800047a:	4b81      	ldr	r3, [pc, #516]	; (8000680 <fsm_automatic_run+0x27c>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	3302      	adds	r3, #2
 8000480:	2264      	movs	r2, #100	; 0x64
 8000482:	fb02 f303 	mul.w	r3, r2, r3
 8000486:	4618      	mov	r0, r3
 8000488:	f001 f9a2 	bl	80017d0 <setTimer1>
		}
		if (timer2_flag == 1) {
 800048c:	4b7d      	ldr	r3, [pc, #500]	; (8000684 <fsm_automatic_run+0x280>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	2b01      	cmp	r3, #1
 8000492:	d107      	bne.n	80004a4 <fsm_automatic_run+0xa0>
			updateBuffer1(led_status_1);
 8000494:	4b78      	ldr	r3, [pc, #480]	; (8000678 <fsm_automatic_run+0x274>)
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f000 fea3 	bl	80011e4 <updateBuffer1>
			setTimer2(100);
 800049e:	2064      	movs	r0, #100	; 0x64
 80004a0:	f001 f9aa 	bl	80017f8 <setTimer2>
		}
		if (timer3_flag == 1) {
 80004a4:	4b78      	ldr	r3, [pc, #480]	; (8000688 <fsm_automatic_run+0x284>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b01      	cmp	r3, #1
 80004aa:	d10a      	bne.n	80004c2 <fsm_automatic_run+0xbe>
			index_led=update_index(index_led);
 80004ac:	4b77      	ldr	r3, [pc, #476]	; (800068c <fsm_automatic_run+0x288>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	4618      	mov	r0, r3
 80004b2:	f000 fcad 	bl	8000e10 <update_index>
 80004b6:	4603      	mov	r3, r0
 80004b8:	4a74      	ldr	r2, [pc, #464]	; (800068c <fsm_automatic_run+0x288>)
 80004ba:	6013      	str	r3, [r2, #0]
			setTimer3(20);
 80004bc:	2014      	movs	r0, #20
 80004be:	f001 f9af 	bl	8001820 <setTimer3>
		}
		if (isButton1Pressed()== 1) {
 80004c2:	f7ff fe43 	bl	800014c <isButton1Pressed>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b01      	cmp	r3, #1
 80004ca:	f040 80c7 	bne.w	800065c <fsm_automatic_run+0x258>
			change_state(CLEAR);
 80004ce:	200a      	movs	r0, #10
 80004d0:	f000 fdb4 	bl	800103c <change_state>
			led_status = MANUAL_RED;
 80004d4:	4b66      	ldr	r3, [pc, #408]	; (8000670 <fsm_automatic_run+0x26c>)
 80004d6:	220e      	movs	r2, #14
 80004d8:	601a      	str	r2, [r3, #0]
			change_state(MANUAL_RED);
 80004da:	200e      	movs	r0, #14
 80004dc:	f000 fdae 	bl	800103c <change_state>
			setTimer1(25);
 80004e0:	2019      	movs	r0, #25
 80004e2:	f001 f975 	bl	80017d0 <setTimer1>
		}
		break;
 80004e6:	e0b9      	b.n	800065c <fsm_automatic_run+0x258>

	case AUTO_RED_YELLOW:
		if (isButton1Pressed()== 1) {
 80004e8:	f7ff fe30 	bl	800014c <isButton1Pressed>
 80004ec:	4603      	mov	r3, r0
 80004ee:	2b01      	cmp	r3, #1
 80004f0:	d10b      	bne.n	800050a <fsm_automatic_run+0x106>
			change_state(CLEAR);
 80004f2:	200a      	movs	r0, #10
 80004f4:	f000 fda2 	bl	800103c <change_state>
			led_status = MANUAL_RED;
 80004f8:	4b5d      	ldr	r3, [pc, #372]	; (8000670 <fsm_automatic_run+0x26c>)
 80004fa:	220e      	movs	r2, #14
 80004fc:	601a      	str	r2, [r3, #0]
			change_state(MANUAL_RED);
 80004fe:	200e      	movs	r0, #14
 8000500:	f000 fd9c 	bl	800103c <change_state>
			setTimer1(25);
 8000504:	2019      	movs	r0, #25
 8000506:	f001 f963 	bl	80017d0 <setTimer1>
		}
		if (timer1_flag == 1) {
 800050a:	4b5c      	ldr	r3, [pc, #368]	; (800067c <fsm_automatic_run+0x278>)
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	2b01      	cmp	r3, #1
 8000510:	d10b      	bne.n	800052a <fsm_automatic_run+0x126>
			led_status = AUTO_GREEN_RED;
 8000512:	4b57      	ldr	r3, [pc, #348]	; (8000670 <fsm_automatic_run+0x26c>)
 8000514:	2207      	movs	r2, #7
 8000516:	601a      	str	r2, [r3, #0]
			setTimer1((GREEN+counter_green)*100);
 8000518:	4b56      	ldr	r3, [pc, #344]	; (8000674 <fsm_automatic_run+0x270>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3303      	adds	r3, #3
 800051e:	2264      	movs	r2, #100	; 0x64
 8000520:	fb02 f303 	mul.w	r3, r2, r3
 8000524:	4618      	mov	r0, r3
 8000526:	f001 f953 	bl	80017d0 <setTimer1>
		}
		if (timer2_flag == 1) {
 800052a:	4b56      	ldr	r3, [pc, #344]	; (8000684 <fsm_automatic_run+0x280>)
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	2b01      	cmp	r3, #1
 8000530:	d107      	bne.n	8000542 <fsm_automatic_run+0x13e>
			updateBuffer1(led_status_1);
 8000532:	4b51      	ldr	r3, [pc, #324]	; (8000678 <fsm_automatic_run+0x274>)
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	4618      	mov	r0, r3
 8000538:	f000 fe54 	bl	80011e4 <updateBuffer1>
			setTimer2(100);
 800053c:	2064      	movs	r0, #100	; 0x64
 800053e:	f001 f95b 	bl	80017f8 <setTimer2>
		}
		if (timer3_flag == 1) {
 8000542:	4b51      	ldr	r3, [pc, #324]	; (8000688 <fsm_automatic_run+0x284>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	2b01      	cmp	r3, #1
 8000548:	f040 808a 	bne.w	8000660 <fsm_automatic_run+0x25c>
			index_led=update_index(index_led);
 800054c:	4b4f      	ldr	r3, [pc, #316]	; (800068c <fsm_automatic_run+0x288>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4618      	mov	r0, r3
 8000552:	f000 fc5d 	bl	8000e10 <update_index>
 8000556:	4603      	mov	r3, r0
 8000558:	4a4c      	ldr	r2, [pc, #304]	; (800068c <fsm_automatic_run+0x288>)
 800055a:	6013      	str	r3, [r2, #0]
			setTimer3(20);
 800055c:	2014      	movs	r0, #20
 800055e:	f001 f95f 	bl	8001820 <setTimer3>
		}

		break;
 8000562:	e07d      	b.n	8000660 <fsm_automatic_run+0x25c>

	case AUTO_GREEN_RED:
		if (isButton1Pressed()== 1) {
 8000564:	f7ff fdf2 	bl	800014c <isButton1Pressed>
 8000568:	4603      	mov	r3, r0
 800056a:	2b01      	cmp	r3, #1
 800056c:	d10b      	bne.n	8000586 <fsm_automatic_run+0x182>
			change_state(CLEAR);
 800056e:	200a      	movs	r0, #10
 8000570:	f000 fd64 	bl	800103c <change_state>
			led_status = MANUAL_RED;
 8000574:	4b3e      	ldr	r3, [pc, #248]	; (8000670 <fsm_automatic_run+0x26c>)
 8000576:	220e      	movs	r2, #14
 8000578:	601a      	str	r2, [r3, #0]
			change_state(MANUAL_RED);
 800057a:	200e      	movs	r0, #14
 800057c:	f000 fd5e 	bl	800103c <change_state>
			setTimer1(25);
 8000580:	2019      	movs	r0, #25
 8000582:	f001 f925 	bl	80017d0 <setTimer1>
		}
		if (timer1_flag == 1) {
 8000586:	4b3d      	ldr	r3, [pc, #244]	; (800067c <fsm_automatic_run+0x278>)
 8000588:	681b      	ldr	r3, [r3, #0]
 800058a:	2b01      	cmp	r3, #1
 800058c:	d10b      	bne.n	80005a6 <fsm_automatic_run+0x1a2>
			led_status = AUTO_YELLOW_RED;
 800058e:	4b38      	ldr	r3, [pc, #224]	; (8000670 <fsm_automatic_run+0x26c>)
 8000590:	2208      	movs	r2, #8
 8000592:	601a      	str	r2, [r3, #0]
			setTimer1((YELLOW+counter_yellow)*100);
 8000594:	4b3a      	ldr	r3, [pc, #232]	; (8000680 <fsm_automatic_run+0x27c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	3302      	adds	r3, #2
 800059a:	2264      	movs	r2, #100	; 0x64
 800059c:	fb02 f303 	mul.w	r3, r2, r3
 80005a0:	4618      	mov	r0, r3
 80005a2:	f001 f915 	bl	80017d0 <setTimer1>
		}
		if (timer2_flag == 1) {
 80005a6:	4b37      	ldr	r3, [pc, #220]	; (8000684 <fsm_automatic_run+0x280>)
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	2b01      	cmp	r3, #1
 80005ac:	d107      	bne.n	80005be <fsm_automatic_run+0x1ba>
			updateBuffer1(led_status_1);
 80005ae:	4b32      	ldr	r3, [pc, #200]	; (8000678 <fsm_automatic_run+0x274>)
 80005b0:	681b      	ldr	r3, [r3, #0]
 80005b2:	4618      	mov	r0, r3
 80005b4:	f000 fe16 	bl	80011e4 <updateBuffer1>
			setTimer2(100);
 80005b8:	2064      	movs	r0, #100	; 0x64
 80005ba:	f001 f91d 	bl	80017f8 <setTimer2>
		}
		if (timer3_flag == 1) {
 80005be:	4b32      	ldr	r3, [pc, #200]	; (8000688 <fsm_automatic_run+0x284>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	2b01      	cmp	r3, #1
 80005c4:	d14e      	bne.n	8000664 <fsm_automatic_run+0x260>
			index_led=update_index(index_led);
 80005c6:	4b31      	ldr	r3, [pc, #196]	; (800068c <fsm_automatic_run+0x288>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	4618      	mov	r0, r3
 80005cc:	f000 fc20 	bl	8000e10 <update_index>
 80005d0:	4603      	mov	r3, r0
 80005d2:	4a2e      	ldr	r2, [pc, #184]	; (800068c <fsm_automatic_run+0x288>)
 80005d4:	6013      	str	r3, [r2, #0]
			setTimer3(20);
 80005d6:	2014      	movs	r0, #20
 80005d8:	f001 f922 	bl	8001820 <setTimer3>
		}
		break;
 80005dc:	e042      	b.n	8000664 <fsm_automatic_run+0x260>

	case AUTO_YELLOW_RED:
		if (isButton1Pressed()== 1) {
 80005de:	f7ff fdb5 	bl	800014c <isButton1Pressed>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d10b      	bne.n	8000600 <fsm_automatic_run+0x1fc>
			change_state(CLEAR);
 80005e8:	200a      	movs	r0, #10
 80005ea:	f000 fd27 	bl	800103c <change_state>
			led_status = MANUAL_RED;
 80005ee:	4b20      	ldr	r3, [pc, #128]	; (8000670 <fsm_automatic_run+0x26c>)
 80005f0:	220e      	movs	r2, #14
 80005f2:	601a      	str	r2, [r3, #0]
			change_state(MANUAL_RED);
 80005f4:	200e      	movs	r0, #14
 80005f6:	f000 fd21 	bl	800103c <change_state>
			setTimer1(25);
 80005fa:	2019      	movs	r0, #25
 80005fc:	f001 f8e8 	bl	80017d0 <setTimer1>
		}
		if (timer1_flag == 1) {
 8000600:	4b1e      	ldr	r3, [pc, #120]	; (800067c <fsm_automatic_run+0x278>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	2b01      	cmp	r3, #1
 8000606:	d10b      	bne.n	8000620 <fsm_automatic_run+0x21c>
			led_status = AUTO_RED_GREEN;
 8000608:	4b19      	ldr	r3, [pc, #100]	; (8000670 <fsm_automatic_run+0x26c>)
 800060a:	2204      	movs	r2, #4
 800060c:	601a      	str	r2, [r3, #0]
			setTimer1((GREEN+counter_green)*100);
 800060e:	4b19      	ldr	r3, [pc, #100]	; (8000674 <fsm_automatic_run+0x270>)
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	3303      	adds	r3, #3
 8000614:	2264      	movs	r2, #100	; 0x64
 8000616:	fb02 f303 	mul.w	r3, r2, r3
 800061a:	4618      	mov	r0, r3
 800061c:	f001 f8d8 	bl	80017d0 <setTimer1>
		}
		if (timer2_flag == 1) {
 8000620:	4b18      	ldr	r3, [pc, #96]	; (8000684 <fsm_automatic_run+0x280>)
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	2b01      	cmp	r3, #1
 8000626:	d107      	bne.n	8000638 <fsm_automatic_run+0x234>
			updateBuffer1(led_status_1);
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <fsm_automatic_run+0x274>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4618      	mov	r0, r3
 800062e:	f000 fdd9 	bl	80011e4 <updateBuffer1>
			setTimer2(100);
 8000632:	2064      	movs	r0, #100	; 0x64
 8000634:	f001 f8e0 	bl	80017f8 <setTimer2>
		}
		if (timer3_flag == 1) {
 8000638:	4b13      	ldr	r3, [pc, #76]	; (8000688 <fsm_automatic_run+0x284>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	2b01      	cmp	r3, #1
 800063e:	d113      	bne.n	8000668 <fsm_automatic_run+0x264>
			index_led=update_index(index_led);
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <fsm_automatic_run+0x288>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4618      	mov	r0, r3
 8000646:	f000 fbe3 	bl	8000e10 <update_index>
 800064a:	4603      	mov	r3, r0
 800064c:	4a0f      	ldr	r2, [pc, #60]	; (800068c <fsm_automatic_run+0x288>)
 800064e:	6013      	str	r3, [r2, #0]
			setTimer3(20);
 8000650:	2014      	movs	r0, #20
 8000652:	f001 f8e5 	bl	8001820 <setTimer3>
		}

		break;
 8000656:	e007      	b.n	8000668 <fsm_automatic_run+0x264>

	default:
		break;
 8000658:	bf00      	nop
 800065a:	e006      	b.n	800066a <fsm_automatic_run+0x266>
		break;
 800065c:	bf00      	nop
 800065e:	e004      	b.n	800066a <fsm_automatic_run+0x266>
		break;
 8000660:	bf00      	nop
 8000662:	e002      	b.n	800066a <fsm_automatic_run+0x266>
		break;
 8000664:	bf00      	nop
 8000666:	e000      	b.n	800066a <fsm_automatic_run+0x266>
		break;
 8000668:	bf00      	nop
	}
}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	20000068 	.word	0x20000068
 8000674:	2000008c 	.word	0x2000008c
 8000678:	20000080 	.word	0x20000080
 800067c:	2000009c 	.word	0x2000009c
 8000680:	20000090 	.word	0x20000090
 8000684:	200000a4 	.word	0x200000a4
 8000688:	200000ac 	.word	0x200000ac
 800068c:	2000007c 	.word	0x2000007c

08000690 <fsm_manual_run>:
 *      Author: PC
 */

#include "global.h"

void fsm_manual_run(){
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
	switch(led_status){
 8000694:	4baa      	ldr	r3, [pc, #680]	; (8000940 <fsm_manual_run+0x2b0>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	2b10      	cmp	r3, #16
 800069a:	f000 80cc 	beq.w	8000836 <fsm_manual_run+0x1a6>
 800069e:	2b10      	cmp	r3, #16
 80006a0:	f300 8145 	bgt.w	800092e <fsm_manual_run+0x29e>
 80006a4:	2b0e      	cmp	r3, #14
 80006a6:	d002      	beq.n	80006ae <fsm_manual_run+0x1e>
 80006a8:	2b0f      	cmp	r3, #15
 80006aa:	d061      	beq.n	8000770 <fsm_manual_run+0xe0>
			counter_red=YELLOW+GREEN+counter_yellow+counter_green-RED;
			temp=0;
		}
		break;
	default:
		break;
 80006ac:	e13f      	b.n	800092e <fsm_manual_run+0x29e>
		if(timer1_flag==1){
 80006ae:	4ba5      	ldr	r3, [pc, #660]	; (8000944 <fsm_manual_run+0x2b4>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	2b01      	cmp	r3, #1
 80006b4:	d105      	bne.n	80006c2 <fsm_manual_run+0x32>
			change_state(MANUAL_RED);
 80006b6:	200e      	movs	r0, #14
 80006b8:	f000 fcc0 	bl	800103c <change_state>
			setTimer1(25);
 80006bc:	2019      	movs	r0, #25
 80006be:	f001 f887 	bl	80017d0 <setTimer1>
		if (timer2_flag == 1) {
 80006c2:	4ba1      	ldr	r3, [pc, #644]	; (8000948 <fsm_manual_run+0x2b8>)
 80006c4:	681b      	ldr	r3, [r3, #0]
 80006c6:	2b01      	cmp	r3, #1
 80006c8:	d10c      	bne.n	80006e4 <fsm_manual_run+0x54>
			updateBuffer2(counter_red+temp+RED,MANUAL_RED);
 80006ca:	4ba0      	ldr	r3, [pc, #640]	; (800094c <fsm_manual_run+0x2bc>)
 80006cc:	681a      	ldr	r2, [r3, #0]
 80006ce:	4ba0      	ldr	r3, [pc, #640]	; (8000950 <fsm_manual_run+0x2c0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4413      	add	r3, r2
 80006d4:	3305      	adds	r3, #5
 80006d6:	210e      	movs	r1, #14
 80006d8:	4618      	mov	r0, r3
 80006da:	f000 ff03 	bl	80014e4 <updateBuffer2>
			setTimer2(5);
 80006de:	2005      	movs	r0, #5
 80006e0:	f001 f88a 	bl	80017f8 <setTimer2>
		if (timer3_flag == 1) {
 80006e4:	4b9b      	ldr	r3, [pc, #620]	; (8000954 <fsm_manual_run+0x2c4>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	2b01      	cmp	r3, #1
 80006ea:	d10a      	bne.n	8000702 <fsm_manual_run+0x72>
			index_led=update_index(index_led);
 80006ec:	4b9a      	ldr	r3, [pc, #616]	; (8000958 <fsm_manual_run+0x2c8>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4618      	mov	r0, r3
 80006f2:	f000 fb8d 	bl	8000e10 <update_index>
 80006f6:	4603      	mov	r3, r0
 80006f8:	4a97      	ldr	r2, [pc, #604]	; (8000958 <fsm_manual_run+0x2c8>)
 80006fa:	6013      	str	r3, [r2, #0]
			setTimer3(20);
 80006fc:	2014      	movs	r0, #20
 80006fe:	f001 f88f 	bl	8001820 <setTimer3>
		if(isButton1Pressed()==1){
 8000702:	f7ff fd23 	bl	800014c <isButton1Pressed>
 8000706:	4603      	mov	r3, r0
 8000708:	2b01      	cmp	r3, #1
 800070a:	d108      	bne.n	800071e <fsm_manual_run+0x8e>
			led_status=MANUAL_YELLOW;
 800070c:	4b8c      	ldr	r3, [pc, #560]	; (8000940 <fsm_manual_run+0x2b0>)
 800070e:	220f      	movs	r2, #15
 8000710:	601a      	str	r2, [r3, #0]
			temp=0;
 8000712:	4b8f      	ldr	r3, [pc, #572]	; (8000950 <fsm_manual_run+0x2c0>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 8000718:	2019      	movs	r0, #25
 800071a:	f001 f859 	bl	80017d0 <setTimer1>
		if(isButton2Pressed()==1){
 800071e:	f7ff fd27 	bl	8000170 <isButton2Pressed>
 8000722:	4603      	mov	r3, r0
 8000724:	2b01      	cmp	r3, #1
 8000726:	d10b      	bne.n	8000740 <fsm_manual_run+0xb0>
			if(counter_red+temp+RED<99){
 8000728:	4b88      	ldr	r3, [pc, #544]	; (800094c <fsm_manual_run+0x2bc>)
 800072a:	681a      	ldr	r2, [r3, #0]
 800072c:	4b88      	ldr	r3, [pc, #544]	; (8000950 <fsm_manual_run+0x2c0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4413      	add	r3, r2
 8000732:	2b5d      	cmp	r3, #93	; 0x5d
 8000734:	dc04      	bgt.n	8000740 <fsm_manual_run+0xb0>
				temp++;
 8000736:	4b86      	ldr	r3, [pc, #536]	; (8000950 <fsm_manual_run+0x2c0>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	4a84      	ldr	r2, [pc, #528]	; (8000950 <fsm_manual_run+0x2c0>)
 800073e:	6013      	str	r3, [r2, #0]
		if(isButton3Pressed()==1){
 8000740:	f7ff fd28 	bl	8000194 <isButton3Pressed>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	f040 80f3 	bne.w	8000932 <fsm_manual_run+0x2a2>
			counter_red+=temp;
 800074c:	4b7f      	ldr	r3, [pc, #508]	; (800094c <fsm_manual_run+0x2bc>)
 800074e:	681a      	ldr	r2, [r3, #0]
 8000750:	4b7f      	ldr	r3, [pc, #508]	; (8000950 <fsm_manual_run+0x2c0>)
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	4413      	add	r3, r2
 8000756:	4a7d      	ldr	r2, [pc, #500]	; (800094c <fsm_manual_run+0x2bc>)
 8000758:	6013      	str	r3, [r2, #0]
			temp=0;
 800075a:	4b7d      	ldr	r3, [pc, #500]	; (8000950 <fsm_manual_run+0x2c0>)
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
			counter_green=RED+counter_red-GREEN-YELLOW-counter_yellow;
 8000760:	4b7a      	ldr	r3, [pc, #488]	; (800094c <fsm_manual_run+0x2bc>)
 8000762:	681a      	ldr	r2, [r3, #0]
 8000764:	4b7d      	ldr	r3, [pc, #500]	; (800095c <fsm_manual_run+0x2cc>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	1ad3      	subs	r3, r2, r3
 800076a:	4a7d      	ldr	r2, [pc, #500]	; (8000960 <fsm_manual_run+0x2d0>)
 800076c:	6013      	str	r3, [r2, #0]
		break;
 800076e:	e0e0      	b.n	8000932 <fsm_manual_run+0x2a2>
		if(timer1_flag==1){
 8000770:	4b74      	ldr	r3, [pc, #464]	; (8000944 <fsm_manual_run+0x2b4>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b01      	cmp	r3, #1
 8000776:	d105      	bne.n	8000784 <fsm_manual_run+0xf4>
			change_state(MANUAL_YELLOW);
 8000778:	200f      	movs	r0, #15
 800077a:	f000 fc5f 	bl	800103c <change_state>
			setTimer1(25);
 800077e:	2019      	movs	r0, #25
 8000780:	f001 f826 	bl	80017d0 <setTimer1>
		if (timer2_flag == 1) {
 8000784:	4b70      	ldr	r3, [pc, #448]	; (8000948 <fsm_manual_run+0x2b8>)
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b01      	cmp	r3, #1
 800078a:	d10c      	bne.n	80007a6 <fsm_manual_run+0x116>
			updateBuffer2(counter_yellow+temp+YELLOW,MANUAL_YELLOW);
 800078c:	4b73      	ldr	r3, [pc, #460]	; (800095c <fsm_manual_run+0x2cc>)
 800078e:	681a      	ldr	r2, [r3, #0]
 8000790:	4b6f      	ldr	r3, [pc, #444]	; (8000950 <fsm_manual_run+0x2c0>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	4413      	add	r3, r2
 8000796:	3302      	adds	r3, #2
 8000798:	210f      	movs	r1, #15
 800079a:	4618      	mov	r0, r3
 800079c:	f000 fea2 	bl	80014e4 <updateBuffer2>
			setTimer2(5);
 80007a0:	2005      	movs	r0, #5
 80007a2:	f001 f829 	bl	80017f8 <setTimer2>
		if (timer3_flag == 1) {
 80007a6:	4b6b      	ldr	r3, [pc, #428]	; (8000954 <fsm_manual_run+0x2c4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d10a      	bne.n	80007c4 <fsm_manual_run+0x134>
			index_led=update_index(index_led);
 80007ae:	4b6a      	ldr	r3, [pc, #424]	; (8000958 <fsm_manual_run+0x2c8>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4618      	mov	r0, r3
 80007b4:	f000 fb2c 	bl	8000e10 <update_index>
 80007b8:	4603      	mov	r3, r0
 80007ba:	4a67      	ldr	r2, [pc, #412]	; (8000958 <fsm_manual_run+0x2c8>)
 80007bc:	6013      	str	r3, [r2, #0]
			setTimer3(20);
 80007be:	2014      	movs	r0, #20
 80007c0:	f001 f82e 	bl	8001820 <setTimer3>
		if(isButton1Pressed()==1){
 80007c4:	f7ff fcc2 	bl	800014c <isButton1Pressed>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d108      	bne.n	80007e0 <fsm_manual_run+0x150>
			led_status=MANUAL_GREEN;
 80007ce:	4b5c      	ldr	r3, [pc, #368]	; (8000940 <fsm_manual_run+0x2b0>)
 80007d0:	2210      	movs	r2, #16
 80007d2:	601a      	str	r2, [r3, #0]
			temp=0;
 80007d4:	4b5e      	ldr	r3, [pc, #376]	; (8000950 <fsm_manual_run+0x2c0>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	601a      	str	r2, [r3, #0]
			setTimer1(25);
 80007da:	2019      	movs	r0, #25
 80007dc:	f000 fff8 	bl	80017d0 <setTimer1>
		if(isButton2Pressed()==1){
 80007e0:	f7ff fcc6 	bl	8000170 <isButton2Pressed>
 80007e4:	4603      	mov	r3, r0
 80007e6:	2b01      	cmp	r3, #1
 80007e8:	d10b      	bne.n	8000802 <fsm_manual_run+0x172>
			if(counter_yellow+temp+YELLOW<99){
 80007ea:	4b5c      	ldr	r3, [pc, #368]	; (800095c <fsm_manual_run+0x2cc>)
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	4b58      	ldr	r3, [pc, #352]	; (8000950 <fsm_manual_run+0x2c0>)
 80007f0:	681b      	ldr	r3, [r3, #0]
 80007f2:	4413      	add	r3, r2
 80007f4:	2b60      	cmp	r3, #96	; 0x60
 80007f6:	dc04      	bgt.n	8000802 <fsm_manual_run+0x172>
				temp++;
 80007f8:	4b55      	ldr	r3, [pc, #340]	; (8000950 <fsm_manual_run+0x2c0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a54      	ldr	r2, [pc, #336]	; (8000950 <fsm_manual_run+0x2c0>)
 8000800:	6013      	str	r3, [r2, #0]
		if(isButton3Pressed()==1){
 8000802:	f7ff fcc7 	bl	8000194 <isButton3Pressed>
 8000806:	4603      	mov	r3, r0
 8000808:	2b01      	cmp	r3, #1
 800080a:	f040 8094 	bne.w	8000936 <fsm_manual_run+0x2a6>
			counter_yellow+=temp;
 800080e:	4b53      	ldr	r3, [pc, #332]	; (800095c <fsm_manual_run+0x2cc>)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	4b4f      	ldr	r3, [pc, #316]	; (8000950 <fsm_manual_run+0x2c0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a50      	ldr	r2, [pc, #320]	; (800095c <fsm_manual_run+0x2cc>)
 800081a:	6013      	str	r3, [r2, #0]
			counter_red=YELLOW+GREEN+counter_yellow+counter_green-RED;
 800081c:	4b4f      	ldr	r3, [pc, #316]	; (800095c <fsm_manual_run+0x2cc>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	1d5a      	adds	r2, r3, #5
 8000822:	4b4f      	ldr	r3, [pc, #316]	; (8000960 <fsm_manual_run+0x2d0>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	4413      	add	r3, r2
 8000828:	3b05      	subs	r3, #5
 800082a:	4a48      	ldr	r2, [pc, #288]	; (800094c <fsm_manual_run+0x2bc>)
 800082c:	6013      	str	r3, [r2, #0]
			temp=0;
 800082e:	4b48      	ldr	r3, [pc, #288]	; (8000950 <fsm_manual_run+0x2c0>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
		break;
 8000834:	e07f      	b.n	8000936 <fsm_manual_run+0x2a6>
		if(timer1_flag==1){
 8000836:	4b43      	ldr	r3, [pc, #268]	; (8000944 <fsm_manual_run+0x2b4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2b01      	cmp	r3, #1
 800083c:	d105      	bne.n	800084a <fsm_manual_run+0x1ba>
			change_state(MANUAL_GREEN);
 800083e:	2010      	movs	r0, #16
 8000840:	f000 fbfc 	bl	800103c <change_state>
			setTimer1(25);
 8000844:	2019      	movs	r0, #25
 8000846:	f000 ffc3 	bl	80017d0 <setTimer1>
		if (timer2_flag == 1) {
 800084a:	4b3f      	ldr	r3, [pc, #252]	; (8000948 <fsm_manual_run+0x2b8>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d10c      	bne.n	800086c <fsm_manual_run+0x1dc>
			updateBuffer2(counter_green+temp+GREEN,MANUAL_GREEN);
 8000852:	4b43      	ldr	r3, [pc, #268]	; (8000960 <fsm_manual_run+0x2d0>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <fsm_manual_run+0x2c0>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	4413      	add	r3, r2
 800085c:	3303      	adds	r3, #3
 800085e:	2110      	movs	r1, #16
 8000860:	4618      	mov	r0, r3
 8000862:	f000 fe3f 	bl	80014e4 <updateBuffer2>
			setTimer2(5);
 8000866:	2005      	movs	r0, #5
 8000868:	f000 ffc6 	bl	80017f8 <setTimer2>
		if (timer3_flag == 1) {
 800086c:	4b39      	ldr	r3, [pc, #228]	; (8000954 <fsm_manual_run+0x2c4>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	2b01      	cmp	r3, #1
 8000872:	d10a      	bne.n	800088a <fsm_manual_run+0x1fa>
			index_led=update_index(index_led);
 8000874:	4b38      	ldr	r3, [pc, #224]	; (8000958 <fsm_manual_run+0x2c8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4618      	mov	r0, r3
 800087a:	f000 fac9 	bl	8000e10 <update_index>
 800087e:	4603      	mov	r3, r0
 8000880:	4a35      	ldr	r2, [pc, #212]	; (8000958 <fsm_manual_run+0x2c8>)
 8000882:	6013      	str	r3, [r2, #0]
			setTimer3(20);
 8000884:	2014      	movs	r0, #20
 8000886:	f000 ffcb 	bl	8001820 <setTimer3>
		if(isButton1Pressed()==1){
 800088a:	f7ff fc5f 	bl	800014c <isButton1Pressed>
 800088e:	4603      	mov	r3, r0
 8000890:	2b01      	cmp	r3, #1
 8000892:	d122      	bne.n	80008da <fsm_manual_run+0x24a>
			temp=0;
 8000894:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <fsm_manual_run+0x2c0>)
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
			led_status_1=INIT;
 800089a:	4b32      	ldr	r3, [pc, #200]	; (8000964 <fsm_manual_run+0x2d4>)
 800089c:	2201      	movs	r2, #1
 800089e:	601a      	str	r2, [r3, #0]
			ontime=0;
 80008a0:	4b31      	ldr	r3, [pc, #196]	; (8000968 <fsm_manual_run+0x2d8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
			change_state(CLEAR);
 80008a6:	200a      	movs	r0, #10
 80008a8:	f000 fbc8 	bl	800103c <change_state>
			led_status = AUTO_RED_GREEN;
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <fsm_manual_run+0x2b0>)
 80008ae:	2204      	movs	r2, #4
 80008b0:	601a      	str	r2, [r3, #0]
			setTimer1((GREEN+counter_green)*100);
 80008b2:	4b2b      	ldr	r3, [pc, #172]	; (8000960 <fsm_manual_run+0x2d0>)
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	3303      	adds	r3, #3
 80008b8:	2264      	movs	r2, #100	; 0x64
 80008ba:	fb02 f303 	mul.w	r3, r2, r3
 80008be:	4618      	mov	r0, r3
 80008c0:	f000 ff86 	bl	80017d0 <setTimer1>
			updateBuffer1(led_status_1);
 80008c4:	4b27      	ldr	r3, [pc, #156]	; (8000964 <fsm_manual_run+0x2d4>)
 80008c6:	681b      	ldr	r3, [r3, #0]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f000 fc8b 	bl	80011e4 <updateBuffer1>
			setTimer2(100);
 80008ce:	2064      	movs	r0, #100	; 0x64
 80008d0:	f000 ff92 	bl	80017f8 <setTimer2>
			setTimer3(20);
 80008d4:	2014      	movs	r0, #20
 80008d6:	f000 ffa3 	bl	8001820 <setTimer3>
		if(isButton2Pressed()==1){
 80008da:	f7ff fc49 	bl	8000170 <isButton2Pressed>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d10b      	bne.n	80008fc <fsm_manual_run+0x26c>
			if(counter_green+temp+GREEN<99){
 80008e4:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <fsm_manual_run+0x2d0>)
 80008e6:	681a      	ldr	r2, [r3, #0]
 80008e8:	4b19      	ldr	r3, [pc, #100]	; (8000950 <fsm_manual_run+0x2c0>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4413      	add	r3, r2
 80008ee:	2b5f      	cmp	r3, #95	; 0x5f
 80008f0:	dc04      	bgt.n	80008fc <fsm_manual_run+0x26c>
				temp++;
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <fsm_manual_run+0x2c0>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	3301      	adds	r3, #1
 80008f8:	4a15      	ldr	r2, [pc, #84]	; (8000950 <fsm_manual_run+0x2c0>)
 80008fa:	6013      	str	r3, [r2, #0]
		if(isButton3Pressed()==1){
 80008fc:	f7ff fc4a 	bl	8000194 <isButton3Pressed>
 8000900:	4603      	mov	r3, r0
 8000902:	2b01      	cmp	r3, #1
 8000904:	d119      	bne.n	800093a <fsm_manual_run+0x2aa>
			counter_green+=temp;
 8000906:	4b16      	ldr	r3, [pc, #88]	; (8000960 <fsm_manual_run+0x2d0>)
 8000908:	681a      	ldr	r2, [r3, #0]
 800090a:	4b11      	ldr	r3, [pc, #68]	; (8000950 <fsm_manual_run+0x2c0>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	4413      	add	r3, r2
 8000910:	4a13      	ldr	r2, [pc, #76]	; (8000960 <fsm_manual_run+0x2d0>)
 8000912:	6013      	str	r3, [r2, #0]
			counter_red=YELLOW+GREEN+counter_yellow+counter_green-RED;
 8000914:	4b11      	ldr	r3, [pc, #68]	; (800095c <fsm_manual_run+0x2cc>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	1d5a      	adds	r2, r3, #5
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <fsm_manual_run+0x2d0>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4413      	add	r3, r2
 8000920:	3b05      	subs	r3, #5
 8000922:	4a0a      	ldr	r2, [pc, #40]	; (800094c <fsm_manual_run+0x2bc>)
 8000924:	6013      	str	r3, [r2, #0]
			temp=0;
 8000926:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <fsm_manual_run+0x2c0>)
 8000928:	2200      	movs	r2, #0
 800092a:	601a      	str	r2, [r3, #0]
		break;
 800092c:	e005      	b.n	800093a <fsm_manual_run+0x2aa>
		break;
 800092e:	bf00      	nop
 8000930:	e004      	b.n	800093c <fsm_manual_run+0x2ac>
		break;
 8000932:	bf00      	nop
 8000934:	e002      	b.n	800093c <fsm_manual_run+0x2ac>
		break;
 8000936:	bf00      	nop
 8000938:	e000      	b.n	800093c <fsm_manual_run+0x2ac>
		break;
 800093a:	bf00      	nop
	}
}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000068 	.word	0x20000068
 8000944:	2000009c 	.word	0x2000009c
 8000948:	200000a4 	.word	0x200000a4
 800094c:	20000088 	.word	0x20000088
 8000950:	20000094 	.word	0x20000094
 8000954:	200000ac 	.word	0x200000ac
 8000958:	2000007c 	.word	0x2000007c
 800095c:	20000090 	.word	0x20000090
 8000960:	2000008c 	.word	0x2000008c
 8000964:	20000080 	.word	0x20000080
 8000968:	20000084 	.word	0x20000084

0800096c <traffic_light>:
#define ONE 1
#define TWO 2
#define THREE 3
#define FOUR 4

void traffic_light(int led_status){
 800096c:	b580      	push	{r7, lr}
 800096e:	b082      	sub	sp, #8
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	3b01      	subs	r3, #1
 8000978:	2b07      	cmp	r3, #7
 800097a:	d869      	bhi.n	8000a50 <traffic_light+0xe4>
 800097c:	a201      	add	r2, pc, #4	; (adr r2, 8000984 <traffic_light+0x18>)
 800097e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000982:	bf00      	nop
 8000984:	080009a5 	.word	0x080009a5
 8000988:	08000a51 	.word	0x08000a51
 800098c:	08000a51 	.word	0x08000a51
 8000990:	080009bd 	.word	0x080009bd
 8000994:	08000a51 	.word	0x08000a51
 8000998:	080009e7 	.word	0x080009e7
 800099c:	08000a07 	.word	0x08000a07
 80009a0:	08000a31 	.word	0x08000a31
	switch(led_status){
	case INIT:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_All, GPIO_PIN_SET);
 80009a4:	2201      	movs	r2, #1
 80009a6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009aa:	482c      	ldr	r0, [pc, #176]	; (8000a5c <traffic_light+0xf0>)
 80009ac:	f001 fb43 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_All, GPIO_PIN_SET);
 80009b0:	2201      	movs	r2, #1
 80009b2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80009b6:	482a      	ldr	r0, [pc, #168]	; (8000a60 <traffic_light+0xf4>)
 80009b8:	f001 fb3d 	bl	8002036 <HAL_GPIO_WritePin>
	case AUTO_RED_GREEN:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	2120      	movs	r1, #32
 80009c0:	4826      	ldr	r0, [pc, #152]	; (8000a5c <traffic_light+0xf0>)
 80009c2:	f001 fb38 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	4824      	ldr	r0, [pc, #144]	; (8000a5c <traffic_light+0xf0>)
 80009cc:	f001 fb33 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 80009d0:	2201      	movs	r2, #1
 80009d2:	2120      	movs	r1, #32
 80009d4:	4822      	ldr	r0, [pc, #136]	; (8000a60 <traffic_light+0xf4>)
 80009d6:	f001 fb2e 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6	, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	2140      	movs	r1, #64	; 0x40
 80009de:	4820      	ldr	r0, [pc, #128]	; (8000a60 <traffic_light+0xf4>)
 80009e0:	f001 fb29 	bl	8002036 <HAL_GPIO_WritePin>
		break;
 80009e4:	e035      	b.n	8000a52 <traffic_light+0xe6>
	case AUTO_RED_YELLOW:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2120      	movs	r1, #32
 80009ea:	481c      	ldr	r0, [pc, #112]	; (8000a5c <traffic_light+0xf0>)
 80009ec:	f001 fb23 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 80009f0:	2201      	movs	r2, #1
 80009f2:	2140      	movs	r1, #64	; 0x40
 80009f4:	481a      	ldr	r0, [pc, #104]	; (8000a60 <traffic_light+0xf4>)
 80009f6:	f001 fb1e 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2180      	movs	r1, #128	; 0x80
 80009fe:	4818      	ldr	r0, [pc, #96]	; (8000a60 <traffic_light+0xf4>)
 8000a00:	f001 fb19 	bl	8002036 <HAL_GPIO_WritePin>
		break;
 8000a04:	e025      	b.n	8000a52 <traffic_light+0xe6>
	case AUTO_GREEN_RED:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000a06:	2201      	movs	r2, #1
 8000a08:	2120      	movs	r1, #32
 8000a0a:	4814      	ldr	r0, [pc, #80]	; (8000a5c <traffic_light+0xf0>)
 8000a0c:	f001 fb13 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000a10:	2200      	movs	r2, #0
 8000a12:	2140      	movs	r1, #64	; 0x40
 8000a14:	4811      	ldr	r0, [pc, #68]	; (8000a5c <traffic_light+0xf0>)
 8000a16:	f001 fb0e 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	2120      	movs	r1, #32
 8000a1e:	4810      	ldr	r0, [pc, #64]	; (8000a60 <traffic_light+0xf4>)
 8000a20:	f001 fb09 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	480d      	ldr	r0, [pc, #52]	; (8000a60 <traffic_light+0xf4>)
 8000a2a:	f001 fb04 	bl	8002036 <HAL_GPIO_WritePin>
		break;
 8000a2e:	e010      	b.n	8000a52 <traffic_light+0xe6>
	case AUTO_YELLOW_RED:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	4809      	ldr	r0, [pc, #36]	; (8000a5c <traffic_light+0xf0>)
 8000a36:	f001 fafe 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2180      	movs	r1, #128	; 0x80
 8000a3e:	4807      	ldr	r0, [pc, #28]	; (8000a5c <traffic_light+0xf0>)
 8000a40:	f001 faf9 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8000a44:	2200      	movs	r2, #0
 8000a46:	2120      	movs	r1, #32
 8000a48:	4805      	ldr	r0, [pc, #20]	; (8000a60 <traffic_light+0xf4>)
 8000a4a:	f001 faf4 	bl	8002036 <HAL_GPIO_WritePin>
		break;
 8000a4e:	e000      	b.n	8000a52 <traffic_light+0xe6>
	default:
		break;
 8000a50:	bf00      	nop
	}
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40010c00 	.word	0x40010c00

08000a64 <display7SEG>:

void display7SEG(int num){
 8000a64:	b580      	push	{r7, lr}
 8000a66:	b082      	sub	sp, #8
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	2b09      	cmp	r3, #9
 8000a70:	f200 81c8 	bhi.w	8000e04 <display7SEG+0x3a0>
 8000a74:	a201      	add	r2, pc, #4	; (adr r2, 8000a7c <display7SEG+0x18>)
 8000a76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a7a:	bf00      	nop
 8000a7c:	08000aa5 	.word	0x08000aa5
 8000a80:	08000afb 	.word	0x08000afb
 8000a84:	08000b51 	.word	0x08000b51
 8000a88:	08000ba7 	.word	0x08000ba7
 8000a8c:	08000bfd 	.word	0x08000bfd
 8000a90:	08000c53 	.word	0x08000c53
 8000a94:	08000ca9 	.word	0x08000ca9
 8000a98:	08000cff 	.word	0x08000cff
 8000a9c:	08000d55 	.word	0x08000d55
 8000aa0:	08000dab 	.word	0x08000dab
	switch(num){
		case 0:
			HAL_GPIO_WritePin(GPIOA, a_Pin, 0);
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000aaa:	48d5      	ldr	r0, [pc, #852]	; (8000e00 <display7SEG+0x39c>)
 8000aac:	f001 fac3 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin, 0);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab6:	48d2      	ldr	r0, [pc, #840]	; (8000e00 <display7SEG+0x39c>)
 8000ab8:	f001 fabd 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, c_Pin, 0);
 8000abc:	2200      	movs	r2, #0
 8000abe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ac2:	48cf      	ldr	r0, [pc, #828]	; (8000e00 <display7SEG+0x39c>)
 8000ac4:	f001 fab7 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, d_Pin, 0);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ace:	48cc      	ldr	r0, [pc, #816]	; (8000e00 <display7SEG+0x39c>)
 8000ad0:	f001 fab1 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ada:	48c9      	ldr	r0, [pc, #804]	; (8000e00 <display7SEG+0x39c>)
 8000adc:	f001 faab 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, f_Pin, 0);
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ae6:	48c6      	ldr	r0, [pc, #792]	; (8000e00 <display7SEG+0x39c>)
 8000ae8:	f001 faa5 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, g_Pin, 1);
 8000aec:	2201      	movs	r2, #1
 8000aee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000af2:	48c3      	ldr	r0, [pc, #780]	; (8000e00 <display7SEG+0x39c>)
 8000af4:	f001 fa9f 	bl	8002036 <HAL_GPIO_WritePin>
			break;
 8000af8:	e185      	b.n	8000e06 <display7SEG+0x3a2>
		case 1:
			HAL_GPIO_WritePin(GPIOA, a_Pin, 1);
 8000afa:	2201      	movs	r2, #1
 8000afc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b00:	48bf      	ldr	r0, [pc, #764]	; (8000e00 <display7SEG+0x39c>)
 8000b02:	f001 fa98 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin, 0);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b0c:	48bc      	ldr	r0, [pc, #752]	; (8000e00 <display7SEG+0x39c>)
 8000b0e:	f001 fa92 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, c_Pin, 0);
 8000b12:	2200      	movs	r2, #0
 8000b14:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b18:	48b9      	ldr	r0, [pc, #740]	; (8000e00 <display7SEG+0x39c>)
 8000b1a:	f001 fa8c 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, d_Pin, 1);
 8000b1e:	2201      	movs	r2, #1
 8000b20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b24:	48b6      	ldr	r0, [pc, #728]	; (8000e00 <display7SEG+0x39c>)
 8000b26:	f001 fa86 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin, 1);
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b30:	48b3      	ldr	r0, [pc, #716]	; (8000e00 <display7SEG+0x39c>)
 8000b32:	f001 fa80 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, f_Pin, 1);
 8000b36:	2201      	movs	r2, #1
 8000b38:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b3c:	48b0      	ldr	r0, [pc, #704]	; (8000e00 <display7SEG+0x39c>)
 8000b3e:	f001 fa7a 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, g_Pin, 1);
 8000b42:	2201      	movs	r2, #1
 8000b44:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b48:	48ad      	ldr	r0, [pc, #692]	; (8000e00 <display7SEG+0x39c>)
 8000b4a:	f001 fa74 	bl	8002036 <HAL_GPIO_WritePin>
			break;
 8000b4e:	e15a      	b.n	8000e06 <display7SEG+0x3a2>
		case 2:
			HAL_GPIO_WritePin(GPIOA, a_Pin, 0);
 8000b50:	2200      	movs	r2, #0
 8000b52:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b56:	48aa      	ldr	r0, [pc, #680]	; (8000e00 <display7SEG+0x39c>)
 8000b58:	f001 fa6d 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin, 0);
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b62:	48a7      	ldr	r0, [pc, #668]	; (8000e00 <display7SEG+0x39c>)
 8000b64:	f001 fa67 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, c_Pin, 1);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b6e:	48a4      	ldr	r0, [pc, #656]	; (8000e00 <display7SEG+0x39c>)
 8000b70:	f001 fa61 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, d_Pin, 0);
 8000b74:	2200      	movs	r2, #0
 8000b76:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b7a:	48a1      	ldr	r0, [pc, #644]	; (8000e00 <display7SEG+0x39c>)
 8000b7c:	f001 fa5b 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin, 0);
 8000b80:	2200      	movs	r2, #0
 8000b82:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b86:	489e      	ldr	r0, [pc, #632]	; (8000e00 <display7SEG+0x39c>)
 8000b88:	f001 fa55 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, f_Pin, 1);
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b92:	489b      	ldr	r0, [pc, #620]	; (8000e00 <display7SEG+0x39c>)
 8000b94:	f001 fa4f 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, g_Pin, 0);
 8000b98:	2200      	movs	r2, #0
 8000b9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b9e:	4898      	ldr	r0, [pc, #608]	; (8000e00 <display7SEG+0x39c>)
 8000ba0:	f001 fa49 	bl	8002036 <HAL_GPIO_WritePin>
			break;
 8000ba4:	e12f      	b.n	8000e06 <display7SEG+0x3a2>
		case 3:
			HAL_GPIO_WritePin(GPIOA, a_Pin, 0);
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bac:	4894      	ldr	r0, [pc, #592]	; (8000e00 <display7SEG+0x39c>)
 8000bae:	f001 fa42 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bb8:	4891      	ldr	r0, [pc, #580]	; (8000e00 <display7SEG+0x39c>)
 8000bba:	f001 fa3c 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, c_Pin, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bc4:	488e      	ldr	r0, [pc, #568]	; (8000e00 <display7SEG+0x39c>)
 8000bc6:	f001 fa36 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, d_Pin, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000bd0:	488b      	ldr	r0, [pc, #556]	; (8000e00 <display7SEG+0x39c>)
 8000bd2:	f001 fa30 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin, 1);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bdc:	4888      	ldr	r0, [pc, #544]	; (8000e00 <display7SEG+0x39c>)
 8000bde:	f001 fa2a 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, f_Pin, 1);
 8000be2:	2201      	movs	r2, #1
 8000be4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000be8:	4885      	ldr	r0, [pc, #532]	; (8000e00 <display7SEG+0x39c>)
 8000bea:	f001 fa24 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, g_Pin, 0);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bf4:	4882      	ldr	r0, [pc, #520]	; (8000e00 <display7SEG+0x39c>)
 8000bf6:	f001 fa1e 	bl	8002036 <HAL_GPIO_WritePin>
			break;
 8000bfa:	e104      	b.n	8000e06 <display7SEG+0x3a2>
		case 4:
			HAL_GPIO_WritePin(GPIOA, a_Pin, 1);
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c02:	487f      	ldr	r0, [pc, #508]	; (8000e00 <display7SEG+0x39c>)
 8000c04:	f001 fa17 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin, 0);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c0e:	487c      	ldr	r0, [pc, #496]	; (8000e00 <display7SEG+0x39c>)
 8000c10:	f001 fa11 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, c_Pin, 0);
 8000c14:	2200      	movs	r2, #0
 8000c16:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c1a:	4879      	ldr	r0, [pc, #484]	; (8000e00 <display7SEG+0x39c>)
 8000c1c:	f001 fa0b 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, d_Pin, 1);
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c26:	4876      	ldr	r0, [pc, #472]	; (8000e00 <display7SEG+0x39c>)
 8000c28:	f001 fa05 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin, 1);
 8000c2c:	2201      	movs	r2, #1
 8000c2e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c32:	4873      	ldr	r0, [pc, #460]	; (8000e00 <display7SEG+0x39c>)
 8000c34:	f001 f9ff 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, f_Pin, 0);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c3e:	4870      	ldr	r0, [pc, #448]	; (8000e00 <display7SEG+0x39c>)
 8000c40:	f001 f9f9 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, g_Pin, 0);
 8000c44:	2200      	movs	r2, #0
 8000c46:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c4a:	486d      	ldr	r0, [pc, #436]	; (8000e00 <display7SEG+0x39c>)
 8000c4c:	f001 f9f3 	bl	8002036 <HAL_GPIO_WritePin>
			break;
 8000c50:	e0d9      	b.n	8000e06 <display7SEG+0x3a2>
		case 5:
			HAL_GPIO_WritePin(GPIOA, a_Pin, 0);
 8000c52:	2200      	movs	r2, #0
 8000c54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c58:	4869      	ldr	r0, [pc, #420]	; (8000e00 <display7SEG+0x39c>)
 8000c5a:	f001 f9ec 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin, 1);
 8000c5e:	2201      	movs	r2, #1
 8000c60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c64:	4866      	ldr	r0, [pc, #408]	; (8000e00 <display7SEG+0x39c>)
 8000c66:	f001 f9e6 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, c_Pin, 0);
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c70:	4863      	ldr	r0, [pc, #396]	; (8000e00 <display7SEG+0x39c>)
 8000c72:	f001 f9e0 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, d_Pin, 0);
 8000c76:	2200      	movs	r2, #0
 8000c78:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c7c:	4860      	ldr	r0, [pc, #384]	; (8000e00 <display7SEG+0x39c>)
 8000c7e:	f001 f9da 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin, 1);
 8000c82:	2201      	movs	r2, #1
 8000c84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c88:	485d      	ldr	r0, [pc, #372]	; (8000e00 <display7SEG+0x39c>)
 8000c8a:	f001 f9d4 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, f_Pin, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c94:	485a      	ldr	r0, [pc, #360]	; (8000e00 <display7SEG+0x39c>)
 8000c96:	f001 f9ce 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, g_Pin, 0);
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ca0:	4857      	ldr	r0, [pc, #348]	; (8000e00 <display7SEG+0x39c>)
 8000ca2:	f001 f9c8 	bl	8002036 <HAL_GPIO_WritePin>
			break;
 8000ca6:	e0ae      	b.n	8000e06 <display7SEG+0x3a2>
		case 6:
			HAL_GPIO_WritePin(GPIOA, a_Pin, 0);
 8000ca8:	2200      	movs	r2, #0
 8000caa:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cae:	4854      	ldr	r0, [pc, #336]	; (8000e00 <display7SEG+0x39c>)
 8000cb0:	f001 f9c1 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin, 1);
 8000cb4:	2201      	movs	r2, #1
 8000cb6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cba:	4851      	ldr	r0, [pc, #324]	; (8000e00 <display7SEG+0x39c>)
 8000cbc:	f001 f9bb 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, c_Pin, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000cc6:	484e      	ldr	r0, [pc, #312]	; (8000e00 <display7SEG+0x39c>)
 8000cc8:	f001 f9b5 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, d_Pin, 0);
 8000ccc:	2200      	movs	r2, #0
 8000cce:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000cd2:	484b      	ldr	r0, [pc, #300]	; (8000e00 <display7SEG+0x39c>)
 8000cd4:	f001 f9af 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin, 0);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cde:	4848      	ldr	r0, [pc, #288]	; (8000e00 <display7SEG+0x39c>)
 8000ce0:	f001 f9a9 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, f_Pin, 0);
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000cea:	4845      	ldr	r0, [pc, #276]	; (8000e00 <display7SEG+0x39c>)
 8000cec:	f001 f9a3 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, g_Pin, 0);
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cf6:	4842      	ldr	r0, [pc, #264]	; (8000e00 <display7SEG+0x39c>)
 8000cf8:	f001 f99d 	bl	8002036 <HAL_GPIO_WritePin>
			break;
 8000cfc:	e083      	b.n	8000e06 <display7SEG+0x3a2>
		case 7:
			HAL_GPIO_WritePin(GPIOA, a_Pin, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d04:	483e      	ldr	r0, [pc, #248]	; (8000e00 <display7SEG+0x39c>)
 8000d06:	f001 f996 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin, 0);
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d10:	483b      	ldr	r0, [pc, #236]	; (8000e00 <display7SEG+0x39c>)
 8000d12:	f001 f990 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, c_Pin, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d1c:	4838      	ldr	r0, [pc, #224]	; (8000e00 <display7SEG+0x39c>)
 8000d1e:	f001 f98a 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, d_Pin, 1);
 8000d22:	2201      	movs	r2, #1
 8000d24:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d28:	4835      	ldr	r0, [pc, #212]	; (8000e00 <display7SEG+0x39c>)
 8000d2a:	f001 f984 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin, 1);
 8000d2e:	2201      	movs	r2, #1
 8000d30:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d34:	4832      	ldr	r0, [pc, #200]	; (8000e00 <display7SEG+0x39c>)
 8000d36:	f001 f97e 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, f_Pin, 1);
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d40:	482f      	ldr	r0, [pc, #188]	; (8000e00 <display7SEG+0x39c>)
 8000d42:	f001 f978 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, g_Pin, 1);
 8000d46:	2201      	movs	r2, #1
 8000d48:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d4c:	482c      	ldr	r0, [pc, #176]	; (8000e00 <display7SEG+0x39c>)
 8000d4e:	f001 f972 	bl	8002036 <HAL_GPIO_WritePin>
			break;
 8000d52:	e058      	b.n	8000e06 <display7SEG+0x3a2>
		case 8:
			HAL_GPIO_WritePin(GPIOA, a_Pin, 0);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d5a:	4829      	ldr	r0, [pc, #164]	; (8000e00 <display7SEG+0x39c>)
 8000d5c:	f001 f96b 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d66:	4826      	ldr	r0, [pc, #152]	; (8000e00 <display7SEG+0x39c>)
 8000d68:	f001 f965 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, c_Pin, 0);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d72:	4823      	ldr	r0, [pc, #140]	; (8000e00 <display7SEG+0x39c>)
 8000d74:	f001 f95f 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, d_Pin, 0);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d7e:	4820      	ldr	r0, [pc, #128]	; (8000e00 <display7SEG+0x39c>)
 8000d80:	f001 f959 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin, 0);
 8000d84:	2200      	movs	r2, #0
 8000d86:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d8a:	481d      	ldr	r0, [pc, #116]	; (8000e00 <display7SEG+0x39c>)
 8000d8c:	f001 f953 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, f_Pin, 0);
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d96:	481a      	ldr	r0, [pc, #104]	; (8000e00 <display7SEG+0x39c>)
 8000d98:	f001 f94d 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, g_Pin, 0);
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000da2:	4817      	ldr	r0, [pc, #92]	; (8000e00 <display7SEG+0x39c>)
 8000da4:	f001 f947 	bl	8002036 <HAL_GPIO_WritePin>
			break;
 8000da8:	e02d      	b.n	8000e06 <display7SEG+0x3a2>
		case 9:
			HAL_GPIO_WritePin(GPIOA, a_Pin, 0);
 8000daa:	2200      	movs	r2, #0
 8000dac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000db0:	4813      	ldr	r0, [pc, #76]	; (8000e00 <display7SEG+0x39c>)
 8000db2:	f001 f940 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, b_Pin, 0);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dbc:	4810      	ldr	r0, [pc, #64]	; (8000e00 <display7SEG+0x39c>)
 8000dbe:	f001 f93a 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, c_Pin, 0);
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <display7SEG+0x39c>)
 8000dca:	f001 f934 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, d_Pin, 0);
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000dd4:	480a      	ldr	r0, [pc, #40]	; (8000e00 <display7SEG+0x39c>)
 8000dd6:	f001 f92e 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, e_Pin, 1);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000de0:	4807      	ldr	r0, [pc, #28]	; (8000e00 <display7SEG+0x39c>)
 8000de2:	f001 f928 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, f_Pin, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000dec:	4804      	ldr	r0, [pc, #16]	; (8000e00 <display7SEG+0x39c>)
 8000dee:	f001 f922 	bl	8002036 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, g_Pin, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000df8:	4801      	ldr	r0, [pc, #4]	; (8000e00 <display7SEG+0x39c>)
 8000dfa:	f001 f91c 	bl	8002036 <HAL_GPIO_WritePin>
			break;
 8000dfe:	e002      	b.n	8000e06 <display7SEG+0x3a2>
 8000e00:	40010800 	.word	0x40010800
		default:
			break;
 8000e04:	bf00      	nop
	}
}
 8000e06:	bf00      	nop
 8000e08:	3708      	adds	r7, #8
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop

08000e10 <update_index>:
	}
	led_status++;
	return led_status;
}

int update_index(int index_led){
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
	if(index_led==3){
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2b03      	cmp	r3, #3
 8000e1c:	d103      	bne.n	8000e26 <update_index+0x16>
		index_led=0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	607b      	str	r3, [r7, #4]
		return index_led;
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	e003      	b.n	8000e2e <update_index+0x1e>
	}
	index_led++;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3301      	adds	r3, #1
 8000e2a:	607b      	str	r3, [r7, #4]
	return index_led;
 8000e2c:	687b      	ldr	r3, [r7, #4]
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bc80      	pop	{r7}
 8000e36:	4770      	bx	lr

08000e38 <update7SEG>:

void update7SEG(int index_led){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d872      	bhi.n	8000f2c <update7SEG+0xf4>
 8000e46:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <update7SEG+0x14>)
 8000e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4c:	08000e5d 	.word	0x08000e5d
 8000e50:	08000e91 	.word	0x08000e91
 8000e54:	08000ec5 	.word	0x08000ec5
 8000e58:	08000ef9 	.word	0x08000ef9
	switch (index_led){
	case 0:
	// Display the first 7 SEG with led_buffer [0]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	2101      	movs	r1, #1
 8000e60:	4835      	ldr	r0, [pc, #212]	; (8000f38 <update7SEG+0x100>)
 8000e62:	f001 f8e8 	bl	8002036 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000e66:	2201      	movs	r2, #1
 8000e68:	2102      	movs	r1, #2
 8000e6a:	4833      	ldr	r0, [pc, #204]	; (8000f38 <update7SEG+0x100>)
 8000e6c:	f001 f8e3 	bl	8002036 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000e70:	2201      	movs	r2, #1
 8000e72:	2104      	movs	r1, #4
 8000e74:	4830      	ldr	r0, [pc, #192]	; (8000f38 <update7SEG+0x100>)
 8000e76:	f001 f8de 	bl	8002036 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000e7a:	2201      	movs	r2, #1
 8000e7c:	2108      	movs	r1, #8
 8000e7e:	482e      	ldr	r0, [pc, #184]	; (8000f38 <update7SEG+0x100>)
 8000e80:	f001 f8d9 	bl	8002036 <HAL_GPIO_WritePin>
		  display7SEG(led_buffer[0]);
 8000e84:	4b2d      	ldr	r3, [pc, #180]	; (8000f3c <update7SEG+0x104>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff fdeb 	bl	8000a64 <display7SEG>
		  break ;
 8000e8e:	e04e      	b.n	8000f2e <update7SEG+0xf6>
	case 1:
	// Display the second 7 SEG with led_buffer [1]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000e90:	2201      	movs	r2, #1
 8000e92:	2101      	movs	r1, #1
 8000e94:	4828      	ldr	r0, [pc, #160]	; (8000f38 <update7SEG+0x100>)
 8000e96:	f001 f8ce 	bl	8002036 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2102      	movs	r1, #2
 8000e9e:	4826      	ldr	r0, [pc, #152]	; (8000f38 <update7SEG+0x100>)
 8000ea0:	f001 f8c9 	bl	8002036 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000ea4:	2201      	movs	r2, #1
 8000ea6:	2104      	movs	r1, #4
 8000ea8:	4823      	ldr	r0, [pc, #140]	; (8000f38 <update7SEG+0x100>)
 8000eaa:	f001 f8c4 	bl	8002036 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000eae:	2201      	movs	r2, #1
 8000eb0:	2108      	movs	r1, #8
 8000eb2:	4821      	ldr	r0, [pc, #132]	; (8000f38 <update7SEG+0x100>)
 8000eb4:	f001 f8bf 	bl	8002036 <HAL_GPIO_WritePin>
		  display7SEG(led_buffer[1]);
 8000eb8:	4b20      	ldr	r3, [pc, #128]	; (8000f3c <update7SEG+0x104>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff fdd1 	bl	8000a64 <display7SEG>
		break ;
 8000ec2:	e034      	b.n	8000f2e <update7SEG+0xf6>
	case 2:
	// Display the third 7 SEG with led_buffer [2]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	2101      	movs	r1, #1
 8000ec8:	481b      	ldr	r0, [pc, #108]	; (8000f38 <update7SEG+0x100>)
 8000eca:	f001 f8b4 	bl	8002036 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000ece:	2201      	movs	r2, #1
 8000ed0:	2102      	movs	r1, #2
 8000ed2:	4819      	ldr	r0, [pc, #100]	; (8000f38 <update7SEG+0x100>)
 8000ed4:	f001 f8af 	bl	8002036 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8000ed8:	2200      	movs	r2, #0
 8000eda:	2104      	movs	r1, #4
 8000edc:	4816      	ldr	r0, [pc, #88]	; (8000f38 <update7SEG+0x100>)
 8000ede:	f001 f8aa 	bl	8002036 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 1);
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	2108      	movs	r1, #8
 8000ee6:	4814      	ldr	r0, [pc, #80]	; (8000f38 <update7SEG+0x100>)
 8000ee8:	f001 f8a5 	bl	8002036 <HAL_GPIO_WritePin>
		  display7SEG(led_buffer[2]);
 8000eec:	4b13      	ldr	r3, [pc, #76]	; (8000f3c <update7SEG+0x104>)
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fdb7 	bl	8000a64 <display7SEG>
		  break ;
 8000ef6:	e01a      	b.n	8000f2e <update7SEG+0xf6>
	case 3:
	// Display the forth 7 SEG with led_buffer [3]
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
 8000ef8:	2201      	movs	r2, #1
 8000efa:	2101      	movs	r1, #1
 8000efc:	480e      	ldr	r0, [pc, #56]	; (8000f38 <update7SEG+0x100>)
 8000efe:	f001 f89a 	bl	8002036 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1);
 8000f02:	2201      	movs	r2, #1
 8000f04:	2102      	movs	r1, #2
 8000f06:	480c      	ldr	r0, [pc, #48]	; (8000f38 <update7SEG+0x100>)
 8000f08:	f001 f895 	bl	8002036 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	2104      	movs	r1, #4
 8000f10:	4809      	ldr	r0, [pc, #36]	; (8000f38 <update7SEG+0x100>)
 8000f12:	f001 f890 	bl	8002036 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, 0);
 8000f16:	2200      	movs	r2, #0
 8000f18:	2108      	movs	r1, #8
 8000f1a:	4807      	ldr	r0, [pc, #28]	; (8000f38 <update7SEG+0x100>)
 8000f1c:	f001 f88b 	bl	8002036 <HAL_GPIO_WritePin>
		  display7SEG(led_buffer[3]);
 8000f20:	4b06      	ldr	r3, [pc, #24]	; (8000f3c <update7SEG+0x104>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff fd9d 	bl	8000a64 <display7SEG>
		  break ;
 8000f2a:	e000      	b.n	8000f2e <update7SEG+0xf6>
	default :
		break ;
 8000f2c:	bf00      	nop
	}
}
 8000f2e:	bf00      	nop
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40010c00 	.word	0x40010c00
 8000f3c:	2000006c 	.word	0x2000006c

08000f40 <clear_all_led>:



void clear_all_led(){
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000f44:	2201      	movs	r2, #1
 8000f46:	2120      	movs	r1, #32
 8000f48:	480e      	ldr	r0, [pc, #56]	; (8000f84 <clear_all_led+0x44>)
 8000f4a:	f001 f874 	bl	8002036 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000f4e:	2201      	movs	r2, #1
 8000f50:	2140      	movs	r1, #64	; 0x40
 8000f52:	480c      	ldr	r0, [pc, #48]	; (8000f84 <clear_all_led+0x44>)
 8000f54:	f001 f86f 	bl	8002036 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000f58:	2201      	movs	r2, #1
 8000f5a:	2180      	movs	r1, #128	; 0x80
 8000f5c:	4809      	ldr	r0, [pc, #36]	; (8000f84 <clear_all_led+0x44>)
 8000f5e:	f001 f86a 	bl	8002036 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000f62:	2201      	movs	r2, #1
 8000f64:	2120      	movs	r1, #32
 8000f66:	4808      	ldr	r0, [pc, #32]	; (8000f88 <clear_all_led+0x48>)
 8000f68:	f001 f865 	bl	8002036 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	2140      	movs	r1, #64	; 0x40
 8000f70:	4805      	ldr	r0, [pc, #20]	; (8000f88 <clear_all_led+0x48>)
 8000f72:	f001 f860 	bl	8002036 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000f76:	2201      	movs	r2, #1
 8000f78:	2180      	movs	r1, #128	; 0x80
 8000f7a:	4803      	ldr	r0, [pc, #12]	; (8000f88 <clear_all_led+0x48>)
 8000f7c:	f001 f85b 	bl	8002036 <HAL_GPIO_WritePin>
}
 8000f80:	bf00      	nop
 8000f82:	bd80      	pop	{r7, pc}
 8000f84:	40010800 	.word	0x40010800
 8000f88:	40010c00 	.word	0x40010c00

08000f8c <clear_led>:

void clear_led(int led_status){
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	switch(led_status){
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	2b10      	cmp	r3, #16
 8000f98:	d033      	beq.n	8001002 <clear_led+0x76>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b10      	cmp	r3, #16
 8000f9e:	dc45      	bgt.n	800102c <clear_led+0xa0>
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b0e      	cmp	r3, #14
 8000fa4:	d003      	beq.n	8000fae <clear_led+0x22>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2b0f      	cmp	r3, #15
 8000faa:	d015      	beq.n	8000fd8 <clear_led+0x4c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
		break;
	}
}
 8000fac:	e03e      	b.n	800102c <clear_led+0xa0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000fae:	2201      	movs	r2, #1
 8000fb0:	2140      	movs	r1, #64	; 0x40
 8000fb2:	4820      	ldr	r0, [pc, #128]	; (8001034 <clear_led+0xa8>)
 8000fb4:	f001 f83f 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2180      	movs	r1, #128	; 0x80
 8000fbc:	481d      	ldr	r0, [pc, #116]	; (8001034 <clear_led+0xa8>)
 8000fbe:	f001 f83a 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	2140      	movs	r1, #64	; 0x40
 8000fc6:	481c      	ldr	r0, [pc, #112]	; (8001038 <clear_led+0xac>)
 8000fc8:	f001 f835 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	2180      	movs	r1, #128	; 0x80
 8000fd0:	4819      	ldr	r0, [pc, #100]	; (8001038 <clear_led+0xac>)
 8000fd2:	f001 f830 	bl	8002036 <HAL_GPIO_WritePin>
		break;
 8000fd6:	e029      	b.n	800102c <clear_led+0xa0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	2120      	movs	r1, #32
 8000fdc:	4815      	ldr	r0, [pc, #84]	; (8001034 <clear_led+0xa8>)
 8000fde:	f001 f82a 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	2140      	movs	r1, #64	; 0x40
 8000fe6:	4813      	ldr	r0, [pc, #76]	; (8001034 <clear_led+0xa8>)
 8000fe8:	f001 f825 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8000fec:	2201      	movs	r2, #1
 8000fee:	2120      	movs	r1, #32
 8000ff0:	4811      	ldr	r0, [pc, #68]	; (8001038 <clear_led+0xac>)
 8000ff2:	f001 f820 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000ff6:	2201      	movs	r2, #1
 8000ff8:	2140      	movs	r1, #64	; 0x40
 8000ffa:	480f      	ldr	r0, [pc, #60]	; (8001038 <clear_led+0xac>)
 8000ffc:	f001 f81b 	bl	8002036 <HAL_GPIO_WritePin>
		break;
 8001000:	e014      	b.n	800102c <clear_led+0xa0>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8001002:	2201      	movs	r2, #1
 8001004:	2120      	movs	r1, #32
 8001006:	480b      	ldr	r0, [pc, #44]	; (8001034 <clear_led+0xa8>)
 8001008:	f001 f815 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_SET);
 800100c:	2201      	movs	r2, #1
 800100e:	2180      	movs	r1, #128	; 0x80
 8001010:	4808      	ldr	r0, [pc, #32]	; (8001034 <clear_led+0xa8>)
 8001012:	f001 f810 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_SET);
 8001016:	2201      	movs	r2, #1
 8001018:	2120      	movs	r1, #32
 800101a:	4807      	ldr	r0, [pc, #28]	; (8001038 <clear_led+0xac>)
 800101c:	f001 f80b 	bl	8002036 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	2180      	movs	r1, #128	; 0x80
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <clear_led+0xac>)
 8001026:	f001 f806 	bl	8002036 <HAL_GPIO_WritePin>
		break;
 800102a:	bf00      	nop
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	40010800 	.word	0x40010800
 8001038:	40010c00 	.word	0x40010c00

0800103c <change_state>:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
		break;
	}
}

void change_state(int mode){
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3b0a      	subs	r3, #10
 8001048:	2b06      	cmp	r3, #6
 800104a:	d820      	bhi.n	800108e <change_state+0x52>
 800104c:	a201      	add	r2, pc, #4	; (adr r2, 8001054 <change_state+0x18>)
 800104e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001052:	bf00      	nop
 8001054:	08001071 	.word	0x08001071
 8001058:	0800108f 	.word	0x0800108f
 800105c:	0800108f 	.word	0x0800108f
 8001060:	0800108f 	.word	0x0800108f
 8001064:	08001077 	.word	0x08001077
 8001068:	0800107f 	.word	0x0800107f
 800106c:	08001087 	.word	0x08001087
	switch(mode){
	case CLEAR:
		clear_all_led();
 8001070:	f7ff ff66 	bl	8000f40 <clear_all_led>
		break;
 8001074:	e00b      	b.n	800108e <change_state+0x52>
	case MANUAL_RED:
		led_blinky(MANUAL_RED);
 8001076:	200e      	movs	r0, #14
 8001078:	f000 f80e 	bl	8001098 <led_blinky>
		break;
 800107c:	e007      	b.n	800108e <change_state+0x52>
	case MANUAL_YELLOW:
		led_blinky(MANUAL_YELLOW);
 800107e:	200f      	movs	r0, #15
 8001080:	f000 f80a 	bl	8001098 <led_blinky>
		break;
 8001084:	e003      	b.n	800108e <change_state+0x52>
	case MANUAL_GREEN:
		led_blinky(MANUAL_GREEN);
 8001086:	2010      	movs	r0, #16
 8001088:	f000 f806 	bl	8001098 <led_blinky>
		break;
 800108c:	bf00      	nop
	}
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop

08001098 <led_blinky>:

void led_blinky(int led_status){
 8001098:	b580      	push	{r7, lr}
 800109a:	b082      	sub	sp, #8
 800109c:	af00      	add	r7, sp, #0
 800109e:	6078      	str	r0, [r7, #4]
	switch(led_status){
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2b10      	cmp	r3, #16
 80010a4:	d021      	beq.n	80010ea <led_blinky+0x52>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b10      	cmp	r3, #16
 80010aa:	dc2a      	bgt.n	8001102 <led_blinky+0x6a>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	2b0e      	cmp	r3, #14
 80010b0:	d003      	beq.n	80010ba <led_blinky+0x22>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d00c      	beq.n	80010d2 <led_blinky+0x3a>
		clear_led(MANUAL_GREEN);
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
		break;
	}
}
 80010b8:	e023      	b.n	8001102 <led_blinky+0x6a>
		clear_led(MANUAL_RED);
 80010ba:	200e      	movs	r0, #14
 80010bc:	f7ff ff66 	bl	8000f8c <clear_led>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80010c0:	2120      	movs	r1, #32
 80010c2:	4812      	ldr	r0, [pc, #72]	; (800110c <led_blinky+0x74>)
 80010c4:	f000 ffcf 	bl	8002066 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_5);
 80010c8:	2120      	movs	r1, #32
 80010ca:	4811      	ldr	r0, [pc, #68]	; (8001110 <led_blinky+0x78>)
 80010cc:	f000 ffcb 	bl	8002066 <HAL_GPIO_TogglePin>
		break;
 80010d0:	e017      	b.n	8001102 <led_blinky+0x6a>
		clear_led(MANUAL_YELLOW);
 80010d2:	200f      	movs	r0, #15
 80010d4:	f7ff ff5a 	bl	8000f8c <clear_led>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_7);
 80010d8:	2180      	movs	r1, #128	; 0x80
 80010da:	480c      	ldr	r0, [pc, #48]	; (800110c <led_blinky+0x74>)
 80010dc:	f000 ffc3 	bl	8002066 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_7);
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	480b      	ldr	r0, [pc, #44]	; (8001110 <led_blinky+0x78>)
 80010e4:	f000 ffbf 	bl	8002066 <HAL_GPIO_TogglePin>
		break;
 80010e8:	e00b      	b.n	8001102 <led_blinky+0x6a>
		clear_led(MANUAL_GREEN);
 80010ea:	2010      	movs	r0, #16
 80010ec:	f7ff ff4e 	bl	8000f8c <clear_led>
		HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_6);
 80010f0:	2140      	movs	r1, #64	; 0x40
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <led_blinky+0x74>)
 80010f4:	f000 ffb7 	bl	8002066 <HAL_GPIO_TogglePin>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_6);
 80010f8:	2140      	movs	r1, #64	; 0x40
 80010fa:	4805      	ldr	r0, [pc, #20]	; (8001110 <led_blinky+0x78>)
 80010fc:	f000 ffb3 	bl	8002066 <HAL_GPIO_TogglePin>
		break;
 8001100:	bf00      	nop
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40010800 	.word	0x40010800
 8001110:	40010c00 	.word	0x40010c00

08001114 <update_led_status>:

void update_led_status(){
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
	if(led_status_1==0){
 8001118:	4b2e      	ldr	r3, [pc, #184]	; (80011d4 <update_led_status+0xc0>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d103      	bne.n	8001128 <update_led_status+0x14>
		led_status_1=1;
 8001120:	4b2c      	ldr	r3, [pc, #176]	; (80011d4 <update_led_status+0xc0>)
 8001122:	2201      	movs	r2, #1
 8001124:	601a      	str	r2, [r3, #0]
			led_status_1=1;
			ontime=0;
		}
		else ontime++;
	}
}
 8001126:	e051      	b.n	80011cc <update_led_status+0xb8>
		if((GREEN+counter_green-ontime)==1 && led_status_1==1){
 8001128:	4b2b      	ldr	r3, [pc, #172]	; (80011d8 <update_led_status+0xc4>)
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	1cda      	adds	r2, r3, #3
 800112e:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <update_led_status+0xc8>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	2b01      	cmp	r3, #1
 8001136:	d10a      	bne.n	800114e <update_led_status+0x3a>
 8001138:	4b26      	ldr	r3, [pc, #152]	; (80011d4 <update_led_status+0xc0>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b01      	cmp	r3, #1
 800113e:	d106      	bne.n	800114e <update_led_status+0x3a>
			led_status_1=2;
 8001140:	4b24      	ldr	r3, [pc, #144]	; (80011d4 <update_led_status+0xc0>)
 8001142:	2202      	movs	r2, #2
 8001144:	601a      	str	r2, [r3, #0]
			ontime=0;
 8001146:	4b25      	ldr	r3, [pc, #148]	; (80011dc <update_led_status+0xc8>)
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	e03e      	b.n	80011cc <update_led_status+0xb8>
		else if((YELLOW+counter_yellow-ontime)==1 && led_status_1==2){
 800114e:	4b24      	ldr	r3, [pc, #144]	; (80011e0 <update_led_status+0xcc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	1c9a      	adds	r2, r3, #2
 8001154:	4b21      	ldr	r3, [pc, #132]	; (80011dc <update_led_status+0xc8>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	1ad3      	subs	r3, r2, r3
 800115a:	2b01      	cmp	r3, #1
 800115c:	d10a      	bne.n	8001174 <update_led_status+0x60>
 800115e:	4b1d      	ldr	r3, [pc, #116]	; (80011d4 <update_led_status+0xc0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	2b02      	cmp	r3, #2
 8001164:	d106      	bne.n	8001174 <update_led_status+0x60>
			led_status_1=3;
 8001166:	4b1b      	ldr	r3, [pc, #108]	; (80011d4 <update_led_status+0xc0>)
 8001168:	2203      	movs	r2, #3
 800116a:	601a      	str	r2, [r3, #0]
			ontime=0;
 800116c:	4b1b      	ldr	r3, [pc, #108]	; (80011dc <update_led_status+0xc8>)
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	e02b      	b.n	80011cc <update_led_status+0xb8>
		else if((GREEN+counter_green-ontime)==1 && led_status_1==3){
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <update_led_status+0xc4>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	1cda      	adds	r2, r3, #3
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <update_led_status+0xc8>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	1ad3      	subs	r3, r2, r3
 8001180:	2b01      	cmp	r3, #1
 8001182:	d10a      	bne.n	800119a <update_led_status+0x86>
 8001184:	4b13      	ldr	r3, [pc, #76]	; (80011d4 <update_led_status+0xc0>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b03      	cmp	r3, #3
 800118a:	d106      	bne.n	800119a <update_led_status+0x86>
			led_status_1=4;
 800118c:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <update_led_status+0xc0>)
 800118e:	2204      	movs	r2, #4
 8001190:	601a      	str	r2, [r3, #0]
			ontime=0;
 8001192:	4b12      	ldr	r3, [pc, #72]	; (80011dc <update_led_status+0xc8>)
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	e018      	b.n	80011cc <update_led_status+0xb8>
		else if((YELLOW+counter_yellow-ontime)==1 && led_status_1==4){
 800119a:	4b11      	ldr	r3, [pc, #68]	; (80011e0 <update_led_status+0xcc>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	1c9a      	adds	r2, r3, #2
 80011a0:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <update_led_status+0xc8>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d10a      	bne.n	80011c0 <update_led_status+0xac>
 80011aa:	4b0a      	ldr	r3, [pc, #40]	; (80011d4 <update_led_status+0xc0>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b04      	cmp	r3, #4
 80011b0:	d106      	bne.n	80011c0 <update_led_status+0xac>
			led_status_1=1;
 80011b2:	4b08      	ldr	r3, [pc, #32]	; (80011d4 <update_led_status+0xc0>)
 80011b4:	2201      	movs	r2, #1
 80011b6:	601a      	str	r2, [r3, #0]
			ontime=0;
 80011b8:	4b08      	ldr	r3, [pc, #32]	; (80011dc <update_led_status+0xc8>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	e005      	b.n	80011cc <update_led_status+0xb8>
		else ontime++;
 80011c0:	4b06      	ldr	r3, [pc, #24]	; (80011dc <update_led_status+0xc8>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	3301      	adds	r3, #1
 80011c6:	4a05      	ldr	r2, [pc, #20]	; (80011dc <update_led_status+0xc8>)
 80011c8:	6013      	str	r3, [r2, #0]
}
 80011ca:	e7ff      	b.n	80011cc <update_led_status+0xb8>
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	20000080 	.word	0x20000080
 80011d8:	2000008c 	.word	0x2000008c
 80011dc:	20000084 	.word	0x20000084
 80011e0:	20000090 	.word	0x20000090

080011e4 <updateBuffer1>:

void updateBuffer1(int status){
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2b04      	cmp	r3, #4
 80011f0:	f200 8166 	bhi.w	80014c0 <updateBuffer1+0x2dc>
 80011f4:	a201      	add	r2, pc, #4	; (adr r2, 80011fc <updateBuffer1+0x18>)
 80011f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fa:	bf00      	nop
 80011fc:	08001211 	.word	0x08001211
 8001200:	08001299 	.word	0x08001299
 8001204:	08001323 	.word	0x08001323
 8001208:	080013ad 	.word	0x080013ad
 800120c:	08001437 	.word	0x08001437
	switch(status){
	case ZERO:
		led_buffer[0]=(RED+counter_red-ontime)/10;
 8001210:	4bae      	ldr	r3, [pc, #696]	; (80014cc <updateBuffer1+0x2e8>)
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	1d5a      	adds	r2, r3, #5
 8001216:	4bae      	ldr	r3, [pc, #696]	; (80014d0 <updateBuffer1+0x2ec>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	4aad      	ldr	r2, [pc, #692]	; (80014d4 <updateBuffer1+0x2f0>)
 800121e:	fb82 1203 	smull	r1, r2, r2, r3
 8001222:	1092      	asrs	r2, r2, #2
 8001224:	17db      	asrs	r3, r3, #31
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	4aab      	ldr	r2, [pc, #684]	; (80014d8 <updateBuffer1+0x2f4>)
 800122a:	6013      	str	r3, [r2, #0]
		led_buffer[1]=(RED+counter_red-ontime)%10;
 800122c:	4ba7      	ldr	r3, [pc, #668]	; (80014cc <updateBuffer1+0x2e8>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	1d5a      	adds	r2, r3, #5
 8001232:	4ba7      	ldr	r3, [pc, #668]	; (80014d0 <updateBuffer1+0x2ec>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	1ad1      	subs	r1, r2, r3
 8001238:	4ba6      	ldr	r3, [pc, #664]	; (80014d4 <updateBuffer1+0x2f0>)
 800123a:	fb83 2301 	smull	r2, r3, r3, r1
 800123e:	109a      	asrs	r2, r3, #2
 8001240:	17cb      	asrs	r3, r1, #31
 8001242:	1ad2      	subs	r2, r2, r3
 8001244:	4613      	mov	r3, r2
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	4413      	add	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	1aca      	subs	r2, r1, r3
 800124e:	4ba2      	ldr	r3, [pc, #648]	; (80014d8 <updateBuffer1+0x2f4>)
 8001250:	605a      	str	r2, [r3, #4]
		led_buffer[2]=(GREEN+counter_green-ontime)/10;
 8001252:	4ba2      	ldr	r3, [pc, #648]	; (80014dc <updateBuffer1+0x2f8>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	1cda      	adds	r2, r3, #3
 8001258:	4b9d      	ldr	r3, [pc, #628]	; (80014d0 <updateBuffer1+0x2ec>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	1ad3      	subs	r3, r2, r3
 800125e:	4a9d      	ldr	r2, [pc, #628]	; (80014d4 <updateBuffer1+0x2f0>)
 8001260:	fb82 1203 	smull	r1, r2, r2, r3
 8001264:	1092      	asrs	r2, r2, #2
 8001266:	17db      	asrs	r3, r3, #31
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	4a9b      	ldr	r2, [pc, #620]	; (80014d8 <updateBuffer1+0x2f4>)
 800126c:	6093      	str	r3, [r2, #8]
		led_buffer[3]=(GREEN+counter_green-ontime)%10;\
 800126e:	4b9b      	ldr	r3, [pc, #620]	; (80014dc <updateBuffer1+0x2f8>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	1cda      	adds	r2, r3, #3
 8001274:	4b96      	ldr	r3, [pc, #600]	; (80014d0 <updateBuffer1+0x2ec>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	1ad1      	subs	r1, r2, r3
 800127a:	4b96      	ldr	r3, [pc, #600]	; (80014d4 <updateBuffer1+0x2f0>)
 800127c:	fb83 2301 	smull	r2, r3, r3, r1
 8001280:	109a      	asrs	r2, r3, #2
 8001282:	17cb      	asrs	r3, r1, #31
 8001284:	1ad2      	subs	r2, r2, r3
 8001286:	4613      	mov	r3, r2
 8001288:	009b      	lsls	r3, r3, #2
 800128a:	4413      	add	r3, r2
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	1aca      	subs	r2, r1, r3
 8001290:	4b91      	ldr	r3, [pc, #580]	; (80014d8 <updateBuffer1+0x2f4>)
 8001292:	60da      	str	r2, [r3, #12]
		update_led_status();
 8001294:	f7ff ff3e 	bl	8001114 <update_led_status>
	case ONE:
		led_buffer[0]=(RED+counter_red-ontime)/10;
 8001298:	4b8c      	ldr	r3, [pc, #560]	; (80014cc <updateBuffer1+0x2e8>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	1d5a      	adds	r2, r3, #5
 800129e:	4b8c      	ldr	r3, [pc, #560]	; (80014d0 <updateBuffer1+0x2ec>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	4a8b      	ldr	r2, [pc, #556]	; (80014d4 <updateBuffer1+0x2f0>)
 80012a6:	fb82 1203 	smull	r1, r2, r2, r3
 80012aa:	1092      	asrs	r2, r2, #2
 80012ac:	17db      	asrs	r3, r3, #31
 80012ae:	1ad3      	subs	r3, r2, r3
 80012b0:	4a89      	ldr	r2, [pc, #548]	; (80014d8 <updateBuffer1+0x2f4>)
 80012b2:	6013      	str	r3, [r2, #0]
		led_buffer[1]=(RED+counter_red-ontime)%10;
 80012b4:	4b85      	ldr	r3, [pc, #532]	; (80014cc <updateBuffer1+0x2e8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	1d5a      	adds	r2, r3, #5
 80012ba:	4b85      	ldr	r3, [pc, #532]	; (80014d0 <updateBuffer1+0x2ec>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1ad1      	subs	r1, r2, r3
 80012c0:	4b84      	ldr	r3, [pc, #528]	; (80014d4 <updateBuffer1+0x2f0>)
 80012c2:	fb83 2301 	smull	r2, r3, r3, r1
 80012c6:	109a      	asrs	r2, r3, #2
 80012c8:	17cb      	asrs	r3, r1, #31
 80012ca:	1ad2      	subs	r2, r2, r3
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	005b      	lsls	r3, r3, #1
 80012d4:	1aca      	subs	r2, r1, r3
 80012d6:	4b80      	ldr	r3, [pc, #512]	; (80014d8 <updateBuffer1+0x2f4>)
 80012d8:	605a      	str	r2, [r3, #4]
		led_buffer[2]=(GREEN+counter_green-ontime)/10;
 80012da:	4b80      	ldr	r3, [pc, #512]	; (80014dc <updateBuffer1+0x2f8>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	1cda      	adds	r2, r3, #3
 80012e0:	4b7b      	ldr	r3, [pc, #492]	; (80014d0 <updateBuffer1+0x2ec>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	4a7b      	ldr	r2, [pc, #492]	; (80014d4 <updateBuffer1+0x2f0>)
 80012e8:	fb82 1203 	smull	r1, r2, r2, r3
 80012ec:	1092      	asrs	r2, r2, #2
 80012ee:	17db      	asrs	r3, r3, #31
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	4a79      	ldr	r2, [pc, #484]	; (80014d8 <updateBuffer1+0x2f4>)
 80012f4:	6093      	str	r3, [r2, #8]
		led_buffer[3]=(GREEN+counter_green-ontime)%10;\
 80012f6:	4b79      	ldr	r3, [pc, #484]	; (80014dc <updateBuffer1+0x2f8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	1cda      	adds	r2, r3, #3
 80012fc:	4b74      	ldr	r3, [pc, #464]	; (80014d0 <updateBuffer1+0x2ec>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	1ad1      	subs	r1, r2, r3
 8001302:	4b74      	ldr	r3, [pc, #464]	; (80014d4 <updateBuffer1+0x2f0>)
 8001304:	fb83 2301 	smull	r2, r3, r3, r1
 8001308:	109a      	asrs	r2, r3, #2
 800130a:	17cb      	asrs	r3, r1, #31
 800130c:	1ad2      	subs	r2, r2, r3
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	1aca      	subs	r2, r1, r3
 8001318:	4b6f      	ldr	r3, [pc, #444]	; (80014d8 <updateBuffer1+0x2f4>)
 800131a:	60da      	str	r2, [r3, #12]
		update_led_status();
 800131c:	f7ff fefa 	bl	8001114 <update_led_status>
		break;
 8001320:	e0cf      	b.n	80014c2 <updateBuffer1+0x2de>
	case TWO:
		led_buffer[0]=(YELLOW+counter_yellow-ontime)/10;
 8001322:	4b6f      	ldr	r3, [pc, #444]	; (80014e0 <updateBuffer1+0x2fc>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	1c9a      	adds	r2, r3, #2
 8001328:	4b69      	ldr	r3, [pc, #420]	; (80014d0 <updateBuffer1+0x2ec>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	4a69      	ldr	r2, [pc, #420]	; (80014d4 <updateBuffer1+0x2f0>)
 8001330:	fb82 1203 	smull	r1, r2, r2, r3
 8001334:	1092      	asrs	r2, r2, #2
 8001336:	17db      	asrs	r3, r3, #31
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	4a67      	ldr	r2, [pc, #412]	; (80014d8 <updateBuffer1+0x2f4>)
 800133c:	6013      	str	r3, [r2, #0]
		led_buffer[1]=(YELLOW+counter_yellow-ontime)%10;
 800133e:	4b68      	ldr	r3, [pc, #416]	; (80014e0 <updateBuffer1+0x2fc>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	1c9a      	adds	r2, r3, #2
 8001344:	4b62      	ldr	r3, [pc, #392]	; (80014d0 <updateBuffer1+0x2ec>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	1ad1      	subs	r1, r2, r3
 800134a:	4b62      	ldr	r3, [pc, #392]	; (80014d4 <updateBuffer1+0x2f0>)
 800134c:	fb83 2301 	smull	r2, r3, r3, r1
 8001350:	109a      	asrs	r2, r3, #2
 8001352:	17cb      	asrs	r3, r1, #31
 8001354:	1ad2      	subs	r2, r2, r3
 8001356:	4613      	mov	r3, r2
 8001358:	009b      	lsls	r3, r3, #2
 800135a:	4413      	add	r3, r2
 800135c:	005b      	lsls	r3, r3, #1
 800135e:	1aca      	subs	r2, r1, r3
 8001360:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <updateBuffer1+0x2f4>)
 8001362:	605a      	str	r2, [r3, #4]
		led_buffer[2]=(YELLOW+counter_yellow-ontime)/10;
 8001364:	4b5e      	ldr	r3, [pc, #376]	; (80014e0 <updateBuffer1+0x2fc>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	1c9a      	adds	r2, r3, #2
 800136a:	4b59      	ldr	r3, [pc, #356]	; (80014d0 <updateBuffer1+0x2ec>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	1ad3      	subs	r3, r2, r3
 8001370:	4a58      	ldr	r2, [pc, #352]	; (80014d4 <updateBuffer1+0x2f0>)
 8001372:	fb82 1203 	smull	r1, r2, r2, r3
 8001376:	1092      	asrs	r2, r2, #2
 8001378:	17db      	asrs	r3, r3, #31
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	4a56      	ldr	r2, [pc, #344]	; (80014d8 <updateBuffer1+0x2f4>)
 800137e:	6093      	str	r3, [r2, #8]
		led_buffer[3]=(YELLOW+counter_yellow-ontime)%10;
 8001380:	4b57      	ldr	r3, [pc, #348]	; (80014e0 <updateBuffer1+0x2fc>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	1c9a      	adds	r2, r3, #2
 8001386:	4b52      	ldr	r3, [pc, #328]	; (80014d0 <updateBuffer1+0x2ec>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	1ad1      	subs	r1, r2, r3
 800138c:	4b51      	ldr	r3, [pc, #324]	; (80014d4 <updateBuffer1+0x2f0>)
 800138e:	fb83 2301 	smull	r2, r3, r3, r1
 8001392:	109a      	asrs	r2, r3, #2
 8001394:	17cb      	asrs	r3, r1, #31
 8001396:	1ad2      	subs	r2, r2, r3
 8001398:	4613      	mov	r3, r2
 800139a:	009b      	lsls	r3, r3, #2
 800139c:	4413      	add	r3, r2
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	1aca      	subs	r2, r1, r3
 80013a2:	4b4d      	ldr	r3, [pc, #308]	; (80014d8 <updateBuffer1+0x2f4>)
 80013a4:	60da      	str	r2, [r3, #12]
		update_led_status();
 80013a6:	f7ff feb5 	bl	8001114 <update_led_status>
		break;
 80013aa:	e08a      	b.n	80014c2 <updateBuffer1+0x2de>
	case THREE:
		led_buffer[0]=(GREEN+counter_green-ontime)/10;
 80013ac:	4b4b      	ldr	r3, [pc, #300]	; (80014dc <updateBuffer1+0x2f8>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	1cda      	adds	r2, r3, #3
 80013b2:	4b47      	ldr	r3, [pc, #284]	; (80014d0 <updateBuffer1+0x2ec>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	1ad3      	subs	r3, r2, r3
 80013b8:	4a46      	ldr	r2, [pc, #280]	; (80014d4 <updateBuffer1+0x2f0>)
 80013ba:	fb82 1203 	smull	r1, r2, r2, r3
 80013be:	1092      	asrs	r2, r2, #2
 80013c0:	17db      	asrs	r3, r3, #31
 80013c2:	1ad3      	subs	r3, r2, r3
 80013c4:	4a44      	ldr	r2, [pc, #272]	; (80014d8 <updateBuffer1+0x2f4>)
 80013c6:	6013      	str	r3, [r2, #0]
		led_buffer[1]=(GREEN+counter_green-ontime)%10;
 80013c8:	4b44      	ldr	r3, [pc, #272]	; (80014dc <updateBuffer1+0x2f8>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	1cda      	adds	r2, r3, #3
 80013ce:	4b40      	ldr	r3, [pc, #256]	; (80014d0 <updateBuffer1+0x2ec>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	1ad1      	subs	r1, r2, r3
 80013d4:	4b3f      	ldr	r3, [pc, #252]	; (80014d4 <updateBuffer1+0x2f0>)
 80013d6:	fb83 2301 	smull	r2, r3, r3, r1
 80013da:	109a      	asrs	r2, r3, #2
 80013dc:	17cb      	asrs	r3, r1, #31
 80013de:	1ad2      	subs	r2, r2, r3
 80013e0:	4613      	mov	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	4413      	add	r3, r2
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	1aca      	subs	r2, r1, r3
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <updateBuffer1+0x2f4>)
 80013ec:	605a      	str	r2, [r3, #4]
		led_buffer[2]=(RED+counter_red-ontime)/10;
 80013ee:	4b37      	ldr	r3, [pc, #220]	; (80014cc <updateBuffer1+0x2e8>)
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	1d5a      	adds	r2, r3, #5
 80013f4:	4b36      	ldr	r3, [pc, #216]	; (80014d0 <updateBuffer1+0x2ec>)
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	1ad3      	subs	r3, r2, r3
 80013fa:	4a36      	ldr	r2, [pc, #216]	; (80014d4 <updateBuffer1+0x2f0>)
 80013fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001400:	1092      	asrs	r2, r2, #2
 8001402:	17db      	asrs	r3, r3, #31
 8001404:	1ad3      	subs	r3, r2, r3
 8001406:	4a34      	ldr	r2, [pc, #208]	; (80014d8 <updateBuffer1+0x2f4>)
 8001408:	6093      	str	r3, [r2, #8]
		led_buffer[3]=(RED+counter_red-ontime)%10;
 800140a:	4b30      	ldr	r3, [pc, #192]	; (80014cc <updateBuffer1+0x2e8>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	1d5a      	adds	r2, r3, #5
 8001410:	4b2f      	ldr	r3, [pc, #188]	; (80014d0 <updateBuffer1+0x2ec>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	1ad1      	subs	r1, r2, r3
 8001416:	4b2f      	ldr	r3, [pc, #188]	; (80014d4 <updateBuffer1+0x2f0>)
 8001418:	fb83 2301 	smull	r2, r3, r3, r1
 800141c:	109a      	asrs	r2, r3, #2
 800141e:	17cb      	asrs	r3, r1, #31
 8001420:	1ad2      	subs	r2, r2, r3
 8001422:	4613      	mov	r3, r2
 8001424:	009b      	lsls	r3, r3, #2
 8001426:	4413      	add	r3, r2
 8001428:	005b      	lsls	r3, r3, #1
 800142a:	1aca      	subs	r2, r1, r3
 800142c:	4b2a      	ldr	r3, [pc, #168]	; (80014d8 <updateBuffer1+0x2f4>)
 800142e:	60da      	str	r2, [r3, #12]
		update_led_status();
 8001430:	f7ff fe70 	bl	8001114 <update_led_status>
		break;
 8001434:	e045      	b.n	80014c2 <updateBuffer1+0x2de>
	case FOUR:
		led_buffer[0]=(YELLOW+counter_yellow-ontime)/10;
 8001436:	4b2a      	ldr	r3, [pc, #168]	; (80014e0 <updateBuffer1+0x2fc>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	1c9a      	adds	r2, r3, #2
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <updateBuffer1+0x2ec>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	4a24      	ldr	r2, [pc, #144]	; (80014d4 <updateBuffer1+0x2f0>)
 8001444:	fb82 1203 	smull	r1, r2, r2, r3
 8001448:	1092      	asrs	r2, r2, #2
 800144a:	17db      	asrs	r3, r3, #31
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	4a22      	ldr	r2, [pc, #136]	; (80014d8 <updateBuffer1+0x2f4>)
 8001450:	6013      	str	r3, [r2, #0]
		led_buffer[1]=(YELLOW+counter_yellow-ontime)%10;
 8001452:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <updateBuffer1+0x2fc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	1c9a      	adds	r2, r3, #2
 8001458:	4b1d      	ldr	r3, [pc, #116]	; (80014d0 <updateBuffer1+0x2ec>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	1ad1      	subs	r1, r2, r3
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <updateBuffer1+0x2f0>)
 8001460:	fb83 2301 	smull	r2, r3, r3, r1
 8001464:	109a      	asrs	r2, r3, #2
 8001466:	17cb      	asrs	r3, r1, #31
 8001468:	1ad2      	subs	r2, r2, r3
 800146a:	4613      	mov	r3, r2
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	4413      	add	r3, r2
 8001470:	005b      	lsls	r3, r3, #1
 8001472:	1aca      	subs	r2, r1, r3
 8001474:	4b18      	ldr	r3, [pc, #96]	; (80014d8 <updateBuffer1+0x2f4>)
 8001476:	605a      	str	r2, [r3, #4]
		led_buffer[2]=(YELLOW+counter_yellow-ontime)/10;
 8001478:	4b19      	ldr	r3, [pc, #100]	; (80014e0 <updateBuffer1+0x2fc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	1c9a      	adds	r2, r3, #2
 800147e:	4b14      	ldr	r3, [pc, #80]	; (80014d0 <updateBuffer1+0x2ec>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	4a13      	ldr	r2, [pc, #76]	; (80014d4 <updateBuffer1+0x2f0>)
 8001486:	fb82 1203 	smull	r1, r2, r2, r3
 800148a:	1092      	asrs	r2, r2, #2
 800148c:	17db      	asrs	r3, r3, #31
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	4a11      	ldr	r2, [pc, #68]	; (80014d8 <updateBuffer1+0x2f4>)
 8001492:	6093      	str	r3, [r2, #8]
		led_buffer[3]=(YELLOW+counter_yellow-ontime)%10;
 8001494:	4b12      	ldr	r3, [pc, #72]	; (80014e0 <updateBuffer1+0x2fc>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	1c9a      	adds	r2, r3, #2
 800149a:	4b0d      	ldr	r3, [pc, #52]	; (80014d0 <updateBuffer1+0x2ec>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	1ad1      	subs	r1, r2, r3
 80014a0:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <updateBuffer1+0x2f0>)
 80014a2:	fb83 2301 	smull	r2, r3, r3, r1
 80014a6:	109a      	asrs	r2, r3, #2
 80014a8:	17cb      	asrs	r3, r1, #31
 80014aa:	1ad2      	subs	r2, r2, r3
 80014ac:	4613      	mov	r3, r2
 80014ae:	009b      	lsls	r3, r3, #2
 80014b0:	4413      	add	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	1aca      	subs	r2, r1, r3
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <updateBuffer1+0x2f4>)
 80014b8:	60da      	str	r2, [r3, #12]
		update_led_status();
 80014ba:	f7ff fe2b 	bl	8001114 <update_led_status>
		break;
 80014be:	e000      	b.n	80014c2 <updateBuffer1+0x2de>
	default:
		break;
 80014c0:	bf00      	nop
	}
}
 80014c2:	bf00      	nop
 80014c4:	3708      	adds	r7, #8
 80014c6:	46bd      	mov	sp, r7
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000088 	.word	0x20000088
 80014d0:	20000084 	.word	0x20000084
 80014d4:	66666667 	.word	0x66666667
 80014d8:	2000006c 	.word	0x2000006c
 80014dc:	2000008c 	.word	0x2000008c
 80014e0:	20000090 	.word	0x20000090

080014e4 <updateBuffer2>:
void updateBuffer2(int duration,int mode){
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	6039      	str	r1, [r7, #0]
	led_buffer[0]=duration/10;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	4a1b      	ldr	r2, [pc, #108]	; (8001560 <updateBuffer2+0x7c>)
 80014f2:	fb82 1203 	smull	r1, r2, r2, r3
 80014f6:	1092      	asrs	r2, r2, #2
 80014f8:	17db      	asrs	r3, r3, #31
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	4a19      	ldr	r2, [pc, #100]	; (8001564 <updateBuffer2+0x80>)
 80014fe:	6013      	str	r3, [r2, #0]
	led_buffer[1]=duration%10;
 8001500:	6879      	ldr	r1, [r7, #4]
 8001502:	4b17      	ldr	r3, [pc, #92]	; (8001560 <updateBuffer2+0x7c>)
 8001504:	fb83 2301 	smull	r2, r3, r3, r1
 8001508:	109a      	asrs	r2, r3, #2
 800150a:	17cb      	asrs	r3, r1, #31
 800150c:	1ad2      	subs	r2, r2, r3
 800150e:	4613      	mov	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	4413      	add	r3, r2
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	1aca      	subs	r2, r1, r3
 8001518:	4b12      	ldr	r3, [pc, #72]	; (8001564 <updateBuffer2+0x80>)
 800151a:	605a      	str	r2, [r3, #4]
	led_buffer[2]=0;
 800151c:	4b11      	ldr	r3, [pc, #68]	; (8001564 <updateBuffer2+0x80>)
 800151e:	2200      	movs	r2, #0
 8001520:	609a      	str	r2, [r3, #8]
	switch(mode){
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	2b10      	cmp	r3, #16
 8001526:	d011      	beq.n	800154c <updateBuffer2+0x68>
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	2b10      	cmp	r3, #16
 800152c:	dc12      	bgt.n	8001554 <updateBuffer2+0x70>
 800152e:	683b      	ldr	r3, [r7, #0]
 8001530:	2b0e      	cmp	r3, #14
 8001532:	d003      	beq.n	800153c <updateBuffer2+0x58>
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	2b0f      	cmp	r3, #15
 8001538:	d004      	beq.n	8001544 <updateBuffer2+0x60>
		break;
	case MANUAL_GREEN:
		led_buffer[3]=4;
		break;
	default:
		break;
 800153a:	e00b      	b.n	8001554 <updateBuffer2+0x70>
		led_buffer[3]=2;
 800153c:	4b09      	ldr	r3, [pc, #36]	; (8001564 <updateBuffer2+0x80>)
 800153e:	2202      	movs	r2, #2
 8001540:	60da      	str	r2, [r3, #12]
		break;
 8001542:	e008      	b.n	8001556 <updateBuffer2+0x72>
		led_buffer[3]=3;
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <updateBuffer2+0x80>)
 8001546:	2203      	movs	r2, #3
 8001548:	60da      	str	r2, [r3, #12]
		break;
 800154a:	e004      	b.n	8001556 <updateBuffer2+0x72>
		led_buffer[3]=4;
 800154c:	4b05      	ldr	r3, [pc, #20]	; (8001564 <updateBuffer2+0x80>)
 800154e:	2204      	movs	r2, #4
 8001550:	60da      	str	r2, [r3, #12]
		break;
 8001552:	e000      	b.n	8001556 <updateBuffer2+0x72>
		break;
 8001554:	bf00      	nop
	}
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr
 8001560:	66666667 	.word	0x66666667
 8001564:	2000006c 	.word	0x2000006c

08001568 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800156c:	f000 fa62 	bl	8001a34 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001570:	f000 f820 	bl	80015b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001574:	f000 f8a6 	bl	80016c4 <MX_GPIO_Init>
  MX_TIM2_Init();
 8001578:	f000 f858 	bl	800162c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800157c:	480a      	ldr	r0, [pc, #40]	; (80015a8 <main+0x40>)
 800157e:	f001 f9b7 	bl	80028f0 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */
  led_status=INIT;
 8001582:	4b0a      	ldr	r3, [pc, #40]	; (80015ac <main+0x44>)
 8001584:	2201      	movs	r2, #1
 8001586:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  traffic_light(led_status);
 8001588:	4b08      	ldr	r3, [pc, #32]	; (80015ac <main+0x44>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4618      	mov	r0, r3
 800158e:	f7ff f9ed 	bl	800096c <traffic_light>
	  update7SEG(index_led);
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <main+0x48>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4618      	mov	r0, r3
 8001598:	f7ff fc4e 	bl	8000e38 <update7SEG>
	  fsm_automatic_run();
 800159c:	f7fe ff32 	bl	8000404 <fsm_automatic_run>
	  fsm_manual_run();
 80015a0:	f7ff f876 	bl	8000690 <fsm_manual_run>
	  traffic_light(led_status);
 80015a4:	e7f0      	b.n	8001588 <main+0x20>
 80015a6:	bf00      	nop
 80015a8:	200000b0 	.word	0x200000b0
 80015ac:	20000068 	.word	0x20000068
 80015b0:	2000007c 	.word	0x2000007c

080015b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b090      	sub	sp, #64	; 0x40
 80015b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015ba:	f107 0318 	add.w	r3, r7, #24
 80015be:	2228      	movs	r2, #40	; 0x28
 80015c0:	2100      	movs	r1, #0
 80015c2:	4618      	mov	r0, r3
 80015c4:	f001 fd50 	bl	8003068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015c8:	1d3b      	adds	r3, r7, #4
 80015ca:	2200      	movs	r2, #0
 80015cc:	601a      	str	r2, [r3, #0]
 80015ce:	605a      	str	r2, [r3, #4]
 80015d0:	609a      	str	r2, [r3, #8]
 80015d2:	60da      	str	r2, [r3, #12]
 80015d4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015da:	2301      	movs	r3, #1
 80015dc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80015de:	2310      	movs	r3, #16
 80015e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015e6:	f107 0318 	add.w	r3, r7, #24
 80015ea:	4618      	mov	r0, r3
 80015ec:	f000 fd54 	bl	8002098 <HAL_RCC_OscConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <SystemClock_Config+0x46>
  {
    Error_Handler();
 80015f6:	f000 f8e5 	bl	80017c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015fa:	230f      	movs	r3, #15
 80015fc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001606:	2300      	movs	r3, #0
 8001608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800160e:	1d3b      	adds	r3, r7, #4
 8001610:	2100      	movs	r1, #0
 8001612:	4618      	mov	r0, r3
 8001614:	f000 ffc0 	bl	8002598 <HAL_RCC_ClockConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 800161e:	f000 f8d1 	bl	80017c4 <Error_Handler>
  }
}
 8001622:	bf00      	nop
 8001624:	3740      	adds	r7, #64	; 0x40
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}
	...

0800162c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b086      	sub	sp, #24
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001632:	f107 0308 	add.w	r3, r7, #8
 8001636:	2200      	movs	r2, #0
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	605a      	str	r2, [r3, #4]
 800163c:	609a      	str	r2, [r3, #8]
 800163e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001640:	463b      	mov	r3, r7
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001648:	4b1d      	ldr	r3, [pc, #116]	; (80016c0 <MX_TIM2_Init+0x94>)
 800164a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800164e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8001650:	4b1b      	ldr	r3, [pc, #108]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001652:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8001656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001658:	4b19      	ldr	r3, [pc, #100]	; (80016c0 <MX_TIM2_Init+0x94>)
 800165a:	2200      	movs	r2, #0
 800165c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 800165e:	4b18      	ldr	r3, [pc, #96]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001660:	2209      	movs	r2, #9
 8001662:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001664:	4b16      	ldr	r3, [pc, #88]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001666:	2200      	movs	r2, #0
 8001668:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800166a:	4b15      	ldr	r3, [pc, #84]	; (80016c0 <MX_TIM2_Init+0x94>)
 800166c:	2200      	movs	r2, #0
 800166e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001670:	4813      	ldr	r0, [pc, #76]	; (80016c0 <MX_TIM2_Init+0x94>)
 8001672:	f001 f8ed 	bl	8002850 <HAL_TIM_Base_Init>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	d001      	beq.n	8001680 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800167c:	f000 f8a2 	bl	80017c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001684:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001686:	f107 0308 	add.w	r3, r7, #8
 800168a:	4619      	mov	r1, r3
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <MX_TIM2_Init+0x94>)
 800168e:	f001 fa83 	bl	8002b98 <HAL_TIM_ConfigClockSource>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001698:	f000 f894 	bl	80017c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800169c:	2300      	movs	r3, #0
 800169e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a0:	2300      	movs	r3, #0
 80016a2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80016a4:	463b      	mov	r3, r7
 80016a6:	4619      	mov	r1, r3
 80016a8:	4805      	ldr	r0, [pc, #20]	; (80016c0 <MX_TIM2_Init+0x94>)
 80016aa:	f001 fc4f 	bl	8002f4c <HAL_TIMEx_MasterConfigSynchronization>
 80016ae:	4603      	mov	r3, r0
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80016b4:	f000 f886 	bl	80017c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80016b8:	bf00      	nop
 80016ba:	3718      	adds	r7, #24
 80016bc:	46bd      	mov	sp, r7
 80016be:	bd80      	pop	{r7, pc}
 80016c0:	200000b0 	.word	0x200000b0

080016c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ca:	f107 0310 	add.w	r3, r7, #16
 80016ce:	2200      	movs	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	605a      	str	r2, [r3, #4]
 80016d4:	609a      	str	r2, [r3, #8]
 80016d6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d8:	4b2e      	ldr	r3, [pc, #184]	; (8001794 <MX_GPIO_Init+0xd0>)
 80016da:	699b      	ldr	r3, [r3, #24]
 80016dc:	4a2d      	ldr	r2, [pc, #180]	; (8001794 <MX_GPIO_Init+0xd0>)
 80016de:	f043 0310 	orr.w	r3, r3, #16
 80016e2:	6193      	str	r3, [r2, #24]
 80016e4:	4b2b      	ldr	r3, [pc, #172]	; (8001794 <MX_GPIO_Init+0xd0>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f003 0310 	and.w	r3, r3, #16
 80016ec:	60fb      	str	r3, [r7, #12]
 80016ee:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f0:	4b28      	ldr	r3, [pc, #160]	; (8001794 <MX_GPIO_Init+0xd0>)
 80016f2:	699b      	ldr	r3, [r3, #24]
 80016f4:	4a27      	ldr	r2, [pc, #156]	; (8001794 <MX_GPIO_Init+0xd0>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6193      	str	r3, [r2, #24]
 80016fc:	4b25      	ldr	r3, [pc, #148]	; (8001794 <MX_GPIO_Init+0xd0>)
 80016fe:	699b      	ldr	r3, [r3, #24]
 8001700:	f003 0304 	and.w	r3, r3, #4
 8001704:	60bb      	str	r3, [r7, #8]
 8001706:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001708:	4b22      	ldr	r3, [pc, #136]	; (8001794 <MX_GPIO_Init+0xd0>)
 800170a:	699b      	ldr	r3, [r3, #24]
 800170c:	4a21      	ldr	r2, [pc, #132]	; (8001794 <MX_GPIO_Init+0xd0>)
 800170e:	f043 0308 	orr.w	r3, r3, #8
 8001712:	6193      	str	r3, [r2, #24]
 8001714:	4b1f      	ldr	r3, [pc, #124]	; (8001794 <MX_GPIO_Init+0xd0>)
 8001716:	699b      	ldr	r3, [r3, #24]
 8001718:	f003 0308 	and.w	r3, r3, #8
 800171c:	607b      	str	r3, [r7, #4]
 800171e:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin
 8001720:	2200      	movs	r2, #0
 8001722:	f64f 61e4 	movw	r1, #65252	; 0xfee4
 8001726:	481c      	ldr	r0, [pc, #112]	; (8001798 <MX_GPIO_Init+0xd4>)
 8001728:	f000 fc85 	bl	8002036 <HAL_GPIO_WritePin>
                          |a_Pin|b_Pin|c_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800172c:	2200      	movs	r2, #0
 800172e:	21ef      	movs	r1, #239	; 0xef
 8001730:	481a      	ldr	r0, [pc, #104]	; (800179c <MX_GPIO_Init+0xd8>)
 8001732:	f000 fc80 	bl	8002036 <HAL_GPIO_WritePin>
                          |LED_REDB5_Pin|LED_GREENB6_Pin|LED_YELLOWB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : Button1_Pin Button2_Pin Button3_Pin */
  GPIO_InitStruct.Pin = Button1_Pin|Button2_Pin|Button3_Pin;
 8001736:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800173a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800173c:	2300      	movs	r3, #0
 800173e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001740:	2301      	movs	r3, #1
 8001742:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001744:	f107 0310 	add.w	r3, r7, #16
 8001748:	4619      	mov	r1, r3
 800174a:	4815      	ldr	r0, [pc, #84]	; (80017a0 <MX_GPIO_Init+0xdc>)
 800174c:	f000 fae2 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 LED_RED_Pin LED_GREEN_Pin LED_YELLOW_Pin
                           a_Pin b_Pin c_Pin d_Pin
                           e_Pin f_Pin g_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|LED_RED_Pin|LED_GREEN_Pin|LED_YELLOW_Pin
 8001750:	f64f 63e4 	movw	r3, #65252	; 0xfee4
 8001754:	613b      	str	r3, [r7, #16]
                          |a_Pin|b_Pin|c_Pin|d_Pin
                          |e_Pin|f_Pin|g_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001756:	2301      	movs	r3, #1
 8001758:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2302      	movs	r3, #2
 8001760:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001762:	f107 0310 	add.w	r3, r7, #16
 8001766:	4619      	mov	r1, r3
 8001768:	480b      	ldr	r0, [pc, #44]	; (8001798 <MX_GPIO_Init+0xd4>)
 800176a:	f000 fad3 	bl	8001d14 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           LED_REDB5_Pin LED_GREENB6_Pin LED_YELLOWB7_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800176e:	23ef      	movs	r3, #239	; 0xef
 8001770:	613b      	str	r3, [r7, #16]
                          |LED_REDB5_Pin|LED_GREENB6_Pin|LED_YELLOWB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001772:	2301      	movs	r3, #1
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2302      	movs	r3, #2
 800177c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800177e:	f107 0310 	add.w	r3, r7, #16
 8001782:	4619      	mov	r1, r3
 8001784:	4805      	ldr	r0, [pc, #20]	; (800179c <MX_GPIO_Init+0xd8>)
 8001786:	f000 fac5 	bl	8001d14 <HAL_GPIO_Init>

}
 800178a:	bf00      	nop
 800178c:	3720      	adds	r7, #32
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	40010800 	.word	0x40010800
 800179c:	40010c00 	.word	0x40010c00
 80017a0:	40011000 	.word	0x40011000

080017a4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback ( TIM_HandleTypeDef * htim )
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
	timerRun();
 80017ac:	f000 f84c 	bl	8001848 <timerRun>
	getKeyInput1();
 80017b0:	f7fe fd26 	bl	8000200 <getKeyInput1>
	getKeyInput2();
 80017b4:	f7fe fd7a 	bl	80002ac <getKeyInput2>
	getKeyInput3();
 80017b8:	f7fe fdce 	bl	8000358 <getKeyInput3>


}
 80017bc:	bf00      	nop
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017c8:	b672      	cpsid	i
}
 80017ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017cc:	e7fe      	b.n	80017cc <Error_Handler+0x8>
	...

080017d0 <setTimer1>:

int timer3_counter=0;
int timer3_flag=0;


void setTimer1(int duration){
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
	timer1_counter=duration;
 80017d8:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <setTimer1+0x20>)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6013      	str	r3, [r2, #0]
	timer1_flag=0;
 80017de:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <setTimer1+0x24>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
}
 80017e4:	bf00      	nop
 80017e6:	370c      	adds	r7, #12
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bc80      	pop	{r7}
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	20000098 	.word	0x20000098
 80017f4:	2000009c 	.word	0x2000009c

080017f8 <setTimer2>:

void setTimer2(int duration){
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
	timer2_counter=duration;
 8001800:	4a05      	ldr	r2, [pc, #20]	; (8001818 <setTimer2+0x20>)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	6013      	str	r3, [r2, #0]
	timer2_flag=0;
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <setTimer2+0x24>)
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	bc80      	pop	{r7}
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	200000a0 	.word	0x200000a0
 800181c:	200000a4 	.word	0x200000a4

08001820 <setTimer3>:

void setTimer3(int duration){
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
	timer3_counter=duration;
 8001828:	4a05      	ldr	r2, [pc, #20]	; (8001840 <setTimer3+0x20>)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6013      	str	r3, [r2, #0]
	timer3_flag=0;
 800182e:	4b05      	ldr	r3, [pc, #20]	; (8001844 <setTimer3+0x24>)
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
}
 8001834:	bf00      	nop
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	200000a8 	.word	0x200000a8
 8001844:	200000ac 	.word	0x200000ac

08001848 <timerRun>:


void timerRun(){
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0
	if(timer1_counter>0){
 800184c:	4b19      	ldr	r3, [pc, #100]	; (80018b4 <timerRun+0x6c>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	2b00      	cmp	r3, #0
 8001852:	dd0b      	ble.n	800186c <timerRun+0x24>
		timer1_counter--;
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <timerRun+0x6c>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	3b01      	subs	r3, #1
 800185a:	4a16      	ldr	r2, [pc, #88]	; (80018b4 <timerRun+0x6c>)
 800185c:	6013      	str	r3, [r2, #0]
		if(timer1_counter<=0){
 800185e:	4b15      	ldr	r3, [pc, #84]	; (80018b4 <timerRun+0x6c>)
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	dc02      	bgt.n	800186c <timerRun+0x24>
			timer1_flag=1;
 8001866:	4b14      	ldr	r3, [pc, #80]	; (80018b8 <timerRun+0x70>)
 8001868:	2201      	movs	r2, #1
 800186a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer2_counter>0){
 800186c:	4b13      	ldr	r3, [pc, #76]	; (80018bc <timerRun+0x74>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2b00      	cmp	r3, #0
 8001872:	dd0b      	ble.n	800188c <timerRun+0x44>
		timer2_counter--;
 8001874:	4b11      	ldr	r3, [pc, #68]	; (80018bc <timerRun+0x74>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	3b01      	subs	r3, #1
 800187a:	4a10      	ldr	r2, [pc, #64]	; (80018bc <timerRun+0x74>)
 800187c:	6013      	str	r3, [r2, #0]
		if(timer2_counter<=0){
 800187e:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <timerRun+0x74>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	dc02      	bgt.n	800188c <timerRun+0x44>
			timer2_flag=1;
 8001886:	4b0e      	ldr	r3, [pc, #56]	; (80018c0 <timerRun+0x78>)
 8001888:	2201      	movs	r2, #1
 800188a:	601a      	str	r2, [r3, #0]
		}
	}
	if(timer3_counter>0){
 800188c:	4b0d      	ldr	r3, [pc, #52]	; (80018c4 <timerRun+0x7c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b00      	cmp	r3, #0
 8001892:	dd0b      	ble.n	80018ac <timerRun+0x64>
		timer3_counter--;
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <timerRun+0x7c>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	3b01      	subs	r3, #1
 800189a:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <timerRun+0x7c>)
 800189c:	6013      	str	r3, [r2, #0]
		if(timer3_counter<=0){
 800189e:	4b09      	ldr	r3, [pc, #36]	; (80018c4 <timerRun+0x7c>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	dc02      	bgt.n	80018ac <timerRun+0x64>
			timer3_flag=1;
 80018a6:	4b08      	ldr	r3, [pc, #32]	; (80018c8 <timerRun+0x80>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
		}
	}
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	20000098 	.word	0x20000098
 80018b8:	2000009c 	.word	0x2000009c
 80018bc:	200000a0 	.word	0x200000a0
 80018c0:	200000a4 	.word	0x200000a4
 80018c4:	200000a8 	.word	0x200000a8
 80018c8:	200000ac 	.word	0x200000ac

080018cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018d2:	4b15      	ldr	r3, [pc, #84]	; (8001928 <HAL_MspInit+0x5c>)
 80018d4:	699b      	ldr	r3, [r3, #24]
 80018d6:	4a14      	ldr	r2, [pc, #80]	; (8001928 <HAL_MspInit+0x5c>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6193      	str	r3, [r2, #24]
 80018de:	4b12      	ldr	r3, [pc, #72]	; (8001928 <HAL_MspInit+0x5c>)
 80018e0:	699b      	ldr	r3, [r3, #24]
 80018e2:	f003 0301 	and.w	r3, r3, #1
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ea:	4b0f      	ldr	r3, [pc, #60]	; (8001928 <HAL_MspInit+0x5c>)
 80018ec:	69db      	ldr	r3, [r3, #28]
 80018ee:	4a0e      	ldr	r2, [pc, #56]	; (8001928 <HAL_MspInit+0x5c>)
 80018f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018f4:	61d3      	str	r3, [r2, #28]
 80018f6:	4b0c      	ldr	r3, [pc, #48]	; (8001928 <HAL_MspInit+0x5c>)
 80018f8:	69db      	ldr	r3, [r3, #28]
 80018fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_MspInit+0x60>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	60fb      	str	r3, [r7, #12]
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800190e:	60fb      	str	r3, [r7, #12]
 8001910:	68fb      	ldr	r3, [r7, #12]
 8001912:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001916:	60fb      	str	r3, [r7, #12]
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <HAL_MspInit+0x60>)
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191e:	bf00      	nop
 8001920:	3714      	adds	r7, #20
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	40021000 	.word	0x40021000
 800192c:	40010000 	.word	0x40010000

08001930 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001940:	d113      	bne.n	800196a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001942:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <HAL_TIM_Base_MspInit+0x44>)
 8001944:	69db      	ldr	r3, [r3, #28]
 8001946:	4a0b      	ldr	r2, [pc, #44]	; (8001974 <HAL_TIM_Base_MspInit+0x44>)
 8001948:	f043 0301 	orr.w	r3, r3, #1
 800194c:	61d3      	str	r3, [r2, #28]
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_TIM_Base_MspInit+0x44>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	60fb      	str	r3, [r7, #12]
 8001958:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800195a:	2200      	movs	r2, #0
 800195c:	2100      	movs	r1, #0
 800195e:	201c      	movs	r0, #28
 8001960:	f000 f9a1 	bl	8001ca6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001964:	201c      	movs	r0, #28
 8001966:	f000 f9ba 	bl	8001cde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800196a:	bf00      	nop
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	40021000 	.word	0x40021000

08001978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800197c:	e7fe      	b.n	800197c <NMI_Handler+0x4>

0800197e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800197e:	b480      	push	{r7}
 8001980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001982:	e7fe      	b.n	8001982 <HardFault_Handler+0x4>

08001984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001988:	e7fe      	b.n	8001988 <MemManage_Handler+0x4>

0800198a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800198e:	e7fe      	b.n	800198e <BusFault_Handler+0x4>

08001990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001994:	e7fe      	b.n	8001994 <UsageFault_Handler+0x4>

08001996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001996:	b480      	push	{r7}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	bc80      	pop	{r7}
 80019a0:	4770      	bx	lr

080019a2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019a2:	b480      	push	{r7}
 80019a4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a6:	bf00      	nop
 80019a8:	46bd      	mov	sp, r7
 80019aa:	bc80      	pop	{r7}
 80019ac:	4770      	bx	lr

080019ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019ae:	b480      	push	{r7}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019b2:	bf00      	nop
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bc80      	pop	{r7}
 80019b8:	4770      	bx	lr

080019ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019be:	f000 f87f 	bl	8001ac0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
	...

080019c8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <TIM2_IRQHandler+0x10>)
 80019ce:	f000 ffdb 	bl	8002988 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200000b0 	.word	0x200000b0

080019dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019e0:	bf00      	nop
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019e8:	f7ff fff8 	bl	80019dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019ec:	480b      	ldr	r0, [pc, #44]	; (8001a1c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80019ee:	490c      	ldr	r1, [pc, #48]	; (8001a20 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80019f0:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <LoopFillZerobss+0x16>)
  movs r3, #0
 80019f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019f4:	e002      	b.n	80019fc <LoopCopyDataInit>

080019f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019fa:	3304      	adds	r3, #4

080019fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a00:	d3f9      	bcc.n	80019f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a02:	4a09      	ldr	r2, [pc, #36]	; (8001a28 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001a04:	4c09      	ldr	r4, [pc, #36]	; (8001a2c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001a06:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a08:	e001      	b.n	8001a0e <LoopFillZerobss>

08001a0a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a0a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a0c:	3204      	adds	r2, #4

08001a0e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a0e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a10:	d3fb      	bcc.n	8001a0a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001a12:	f001 fb05 	bl	8003020 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a16:	f7ff fda7 	bl	8001568 <main>
  bx lr
 8001a1a:	4770      	bx	lr
  ldr r0, =_sdata
 8001a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001a20:	2000003c 	.word	0x2000003c
  ldr r2, =_sidata
 8001a24:	080030bc 	.word	0x080030bc
  ldr r2, =_sbss
 8001a28:	2000003c 	.word	0x2000003c
  ldr r4, =_ebss
 8001a2c:	200000fc 	.word	0x200000fc

08001a30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001a30:	e7fe      	b.n	8001a30 <ADC1_2_IRQHandler>
	...

08001a34 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001a38:	4b08      	ldr	r3, [pc, #32]	; (8001a5c <HAL_Init+0x28>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a07      	ldr	r2, [pc, #28]	; (8001a5c <HAL_Init+0x28>)
 8001a3e:	f043 0310 	orr.w	r3, r3, #16
 8001a42:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a44:	2003      	movs	r0, #3
 8001a46:	f000 f923 	bl	8001c90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001a4a:	200f      	movs	r0, #15
 8001a4c:	f000 f808 	bl	8001a60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001a50:	f7ff ff3c 	bl	80018cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40022000 	.word	0x40022000

08001a60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b082      	sub	sp, #8
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a68:	4b12      	ldr	r3, [pc, #72]	; (8001ab4 <HAL_InitTick+0x54>)
 8001a6a:	681a      	ldr	r2, [r3, #0]
 8001a6c:	4b12      	ldr	r3, [pc, #72]	; (8001ab8 <HAL_InitTick+0x58>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	4619      	mov	r1, r3
 8001a72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001a76:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f93b 	bl	8001cfa <HAL_SYSTICK_Config>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	e00e      	b.n	8001aac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	2b0f      	cmp	r3, #15
 8001a92:	d80a      	bhi.n	8001aaa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a94:	2200      	movs	r2, #0
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	f04f 30ff 	mov.w	r0, #4294967295
 8001a9c:	f000 f903 	bl	8001ca6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001aa0:	4a06      	ldr	r2, [pc, #24]	; (8001abc <HAL_InitTick+0x5c>)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	e000      	b.n	8001aac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001aaa:	2301      	movs	r3, #1
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3708      	adds	r7, #8
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	20000030 	.word	0x20000030
 8001ab8:	20000038 	.word	0x20000038
 8001abc:	20000034 	.word	0x20000034

08001ac0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <HAL_IncTick+0x1c>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	4b05      	ldr	r3, [pc, #20]	; (8001ae0 <HAL_IncTick+0x20>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4413      	add	r3, r2
 8001ad0:	4a03      	ldr	r2, [pc, #12]	; (8001ae0 <HAL_IncTick+0x20>)
 8001ad2:	6013      	str	r3, [r2, #0]
}
 8001ad4:	bf00      	nop
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	20000038 	.word	0x20000038
 8001ae0:	200000f8 	.word	0x200000f8

08001ae4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ae8:	4b02      	ldr	r3, [pc, #8]	; (8001af4 <HAL_GetTick+0x10>)
 8001aea:	681b      	ldr	r3, [r3, #0]
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bc80      	pop	{r7}
 8001af2:	4770      	bx	lr
 8001af4:	200000f8 	.word	0x200000f8

08001af8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f003 0307 	and.w	r3, r3, #7
 8001b06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b08:	4b0c      	ldr	r3, [pc, #48]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b0a:	68db      	ldr	r3, [r3, #12]
 8001b0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b0e:	68ba      	ldr	r2, [r7, #8]
 8001b10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001b14:	4013      	ands	r3, r2
 8001b16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <__NVIC_SetPriorityGrouping+0x44>)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	60d3      	str	r3, [r2, #12]
}
 8001b30:	bf00      	nop
 8001b32:	3714      	adds	r7, #20
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bc80      	pop	{r7}
 8001b38:	4770      	bx	lr
 8001b3a:	bf00      	nop
 8001b3c:	e000ed00 	.word	0xe000ed00

08001b40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b40:	b480      	push	{r7}
 8001b42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b44:	4b04      	ldr	r3, [pc, #16]	; (8001b58 <__NVIC_GetPriorityGrouping+0x18>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	0a1b      	lsrs	r3, r3, #8
 8001b4a:	f003 0307 	and.w	r3, r3, #7
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bc80      	pop	{r7}
 8001b54:	4770      	bx	lr
 8001b56:	bf00      	nop
 8001b58:	e000ed00 	.word	0xe000ed00

08001b5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b5c:	b480      	push	{r7}
 8001b5e:	b083      	sub	sp, #12
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	4603      	mov	r3, r0
 8001b64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	db0b      	blt.n	8001b86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b6e:	79fb      	ldrb	r3, [r7, #7]
 8001b70:	f003 021f 	and.w	r2, r3, #31
 8001b74:	4906      	ldr	r1, [pc, #24]	; (8001b90 <__NVIC_EnableIRQ+0x34>)
 8001b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b7a:	095b      	lsrs	r3, r3, #5
 8001b7c:	2001      	movs	r0, #1
 8001b7e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b86:	bf00      	nop
 8001b88:	370c      	adds	r7, #12
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bc80      	pop	{r7}
 8001b8e:	4770      	bx	lr
 8001b90:	e000e100 	.word	0xe000e100

08001b94 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b94:	b480      	push	{r7}
 8001b96:	b083      	sub	sp, #12
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	6039      	str	r1, [r7, #0]
 8001b9e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	db0a      	blt.n	8001bbe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	490c      	ldr	r1, [pc, #48]	; (8001be0 <__NVIC_SetPriority+0x4c>)
 8001bae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bb2:	0112      	lsls	r2, r2, #4
 8001bb4:	b2d2      	uxtb	r2, r2
 8001bb6:	440b      	add	r3, r1
 8001bb8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bbc:	e00a      	b.n	8001bd4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	b2da      	uxtb	r2, r3
 8001bc2:	4908      	ldr	r1, [pc, #32]	; (8001be4 <__NVIC_SetPriority+0x50>)
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	f003 030f 	and.w	r3, r3, #15
 8001bca:	3b04      	subs	r3, #4
 8001bcc:	0112      	lsls	r2, r2, #4
 8001bce:	b2d2      	uxtb	r2, r2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	761a      	strb	r2, [r3, #24]
}
 8001bd4:	bf00      	nop
 8001bd6:	370c      	adds	r7, #12
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bc80      	pop	{r7}
 8001bdc:	4770      	bx	lr
 8001bde:	bf00      	nop
 8001be0:	e000e100 	.word	0xe000e100
 8001be4:	e000ed00 	.word	0xe000ed00

08001be8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001be8:	b480      	push	{r7}
 8001bea:	b089      	sub	sp, #36	; 0x24
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	60f8      	str	r0, [r7, #12]
 8001bf0:	60b9      	str	r1, [r7, #8]
 8001bf2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	f003 0307 	and.w	r3, r3, #7
 8001bfa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f1c3 0307 	rsb	r3, r3, #7
 8001c02:	2b04      	cmp	r3, #4
 8001c04:	bf28      	it	cs
 8001c06:	2304      	movcs	r3, #4
 8001c08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3304      	adds	r3, #4
 8001c0e:	2b06      	cmp	r3, #6
 8001c10:	d902      	bls.n	8001c18 <NVIC_EncodePriority+0x30>
 8001c12:	69fb      	ldr	r3, [r7, #28]
 8001c14:	3b03      	subs	r3, #3
 8001c16:	e000      	b.n	8001c1a <NVIC_EncodePriority+0x32>
 8001c18:	2300      	movs	r3, #0
 8001c1a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c20:	69bb      	ldr	r3, [r7, #24]
 8001c22:	fa02 f303 	lsl.w	r3, r2, r3
 8001c26:	43da      	mvns	r2, r3
 8001c28:	68bb      	ldr	r3, [r7, #8]
 8001c2a:	401a      	ands	r2, r3
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c30:	f04f 31ff 	mov.w	r1, #4294967295
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	fa01 f303 	lsl.w	r3, r1, r3
 8001c3a:	43d9      	mvns	r1, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c40:	4313      	orrs	r3, r2
         );
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3724      	adds	r7, #36	; 0x24
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bc80      	pop	{r7}
 8001c4a:	4770      	bx	lr

08001c4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	3b01      	subs	r3, #1
 8001c58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c5c:	d301      	bcc.n	8001c62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e00f      	b.n	8001c82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c62:	4a0a      	ldr	r2, [pc, #40]	; (8001c8c <SysTick_Config+0x40>)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3b01      	subs	r3, #1
 8001c68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c6a:	210f      	movs	r1, #15
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	f7ff ff90 	bl	8001b94 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c74:	4b05      	ldr	r3, [pc, #20]	; (8001c8c <SysTick_Config+0x40>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c7a:	4b04      	ldr	r3, [pc, #16]	; (8001c8c <SysTick_Config+0x40>)
 8001c7c:	2207      	movs	r2, #7
 8001c7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c80:	2300      	movs	r3, #0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	3708      	adds	r7, #8
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	bf00      	nop
 8001c8c:	e000e010 	.word	0xe000e010

08001c90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f7ff ff2d 	bl	8001af8 <__NVIC_SetPriorityGrouping>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}

08001ca6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ca6:	b580      	push	{r7, lr}
 8001ca8:	b086      	sub	sp, #24
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	4603      	mov	r3, r0
 8001cae:	60b9      	str	r1, [r7, #8]
 8001cb0:	607a      	str	r2, [r7, #4]
 8001cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001cb8:	f7ff ff42 	bl	8001b40 <__NVIC_GetPriorityGrouping>
 8001cbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	68b9      	ldr	r1, [r7, #8]
 8001cc2:	6978      	ldr	r0, [r7, #20]
 8001cc4:	f7ff ff90 	bl	8001be8 <NVIC_EncodePriority>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cce:	4611      	mov	r1, r2
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff ff5f 	bl	8001b94 <__NVIC_SetPriority>
}
 8001cd6:	bf00      	nop
 8001cd8:	3718      	adds	r7, #24
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b082      	sub	sp, #8
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff35 	bl	8001b5c <__NVIC_EnableIRQ>
}
 8001cf2:	bf00      	nop
 8001cf4:	3708      	adds	r7, #8
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	b082      	sub	sp, #8
 8001cfe:	af00      	add	r7, sp, #0
 8001d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f7ff ffa2 	bl	8001c4c <SysTick_Config>
 8001d08:	4603      	mov	r3, r0
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3708      	adds	r7, #8
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
	...

08001d14 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b08b      	sub	sp, #44	; 0x2c
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
 8001d1c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001d22:	2300      	movs	r3, #0
 8001d24:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d26:	e148      	b.n	8001fba <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001d28:	2201      	movs	r2, #1
 8001d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d30:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	69fa      	ldr	r2, [r7, #28]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	429a      	cmp	r2, r3
 8001d42:	f040 8137 	bne.w	8001fb4 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	4aa3      	ldr	r2, [pc, #652]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d05e      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d50:	4aa1      	ldr	r2, [pc, #644]	; (8001fd8 <HAL_GPIO_Init+0x2c4>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d875      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d56:	4aa1      	ldr	r2, [pc, #644]	; (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d058      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d5c:	4a9f      	ldr	r2, [pc, #636]	; (8001fdc <HAL_GPIO_Init+0x2c8>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d86f      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d62:	4a9f      	ldr	r2, [pc, #636]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d052      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d68:	4a9d      	ldr	r2, [pc, #628]	; (8001fe0 <HAL_GPIO_Init+0x2cc>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d869      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d6e:	4a9d      	ldr	r2, [pc, #628]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d04c      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d74:	4a9b      	ldr	r2, [pc, #620]	; (8001fe4 <HAL_GPIO_Init+0x2d0>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d863      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d7a:	4a9b      	ldr	r2, [pc, #620]	; (8001fe8 <HAL_GPIO_Init+0x2d4>)
 8001d7c:	4293      	cmp	r3, r2
 8001d7e:	d046      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
 8001d80:	4a99      	ldr	r2, [pc, #612]	; (8001fe8 <HAL_GPIO_Init+0x2d4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d85d      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d86:	2b12      	cmp	r3, #18
 8001d88:	d82a      	bhi.n	8001de0 <HAL_GPIO_Init+0xcc>
 8001d8a:	2b12      	cmp	r3, #18
 8001d8c:	d859      	bhi.n	8001e42 <HAL_GPIO_Init+0x12e>
 8001d8e:	a201      	add	r2, pc, #4	; (adr r2, 8001d94 <HAL_GPIO_Init+0x80>)
 8001d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d94:	08001e0f 	.word	0x08001e0f
 8001d98:	08001de9 	.word	0x08001de9
 8001d9c:	08001dfb 	.word	0x08001dfb
 8001da0:	08001e3d 	.word	0x08001e3d
 8001da4:	08001e43 	.word	0x08001e43
 8001da8:	08001e43 	.word	0x08001e43
 8001dac:	08001e43 	.word	0x08001e43
 8001db0:	08001e43 	.word	0x08001e43
 8001db4:	08001e43 	.word	0x08001e43
 8001db8:	08001e43 	.word	0x08001e43
 8001dbc:	08001e43 	.word	0x08001e43
 8001dc0:	08001e43 	.word	0x08001e43
 8001dc4:	08001e43 	.word	0x08001e43
 8001dc8:	08001e43 	.word	0x08001e43
 8001dcc:	08001e43 	.word	0x08001e43
 8001dd0:	08001e43 	.word	0x08001e43
 8001dd4:	08001e43 	.word	0x08001e43
 8001dd8:	08001df1 	.word	0x08001df1
 8001ddc:	08001e05 	.word	0x08001e05
 8001de0:	4a82      	ldr	r2, [pc, #520]	; (8001fec <HAL_GPIO_Init+0x2d8>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001de6:	e02c      	b.n	8001e42 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	68db      	ldr	r3, [r3, #12]
 8001dec:	623b      	str	r3, [r7, #32]
          break;
 8001dee:	e029      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	3304      	adds	r3, #4
 8001df6:	623b      	str	r3, [r7, #32]
          break;
 8001df8:	e024      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	3308      	adds	r3, #8
 8001e00:	623b      	str	r3, [r7, #32]
          break;
 8001e02:	e01f      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	330c      	adds	r3, #12
 8001e0a:	623b      	str	r3, [r7, #32]
          break;
 8001e0c:	e01a      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d102      	bne.n	8001e1c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001e16:	2304      	movs	r3, #4
 8001e18:	623b      	str	r3, [r7, #32]
          break;
 8001e1a:	e013      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	2b01      	cmp	r3, #1
 8001e22:	d105      	bne.n	8001e30 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e24:	2308      	movs	r3, #8
 8001e26:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	611a      	str	r2, [r3, #16]
          break;
 8001e2e:	e009      	b.n	8001e44 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001e30:	2308      	movs	r3, #8
 8001e32:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	69fa      	ldr	r2, [r7, #28]
 8001e38:	615a      	str	r2, [r3, #20]
          break;
 8001e3a:	e003      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	623b      	str	r3, [r7, #32]
          break;
 8001e40:	e000      	b.n	8001e44 <HAL_GPIO_Init+0x130>
          break;
 8001e42:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	2bff      	cmp	r3, #255	; 0xff
 8001e48:	d801      	bhi.n	8001e4e <HAL_GPIO_Init+0x13a>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	e001      	b.n	8001e52 <HAL_GPIO_Init+0x13e>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	3304      	adds	r3, #4
 8001e52:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	2bff      	cmp	r3, #255	; 0xff
 8001e58:	d802      	bhi.n	8001e60 <HAL_GPIO_Init+0x14c>
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	e002      	b.n	8001e66 <HAL_GPIO_Init+0x152>
 8001e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e62:	3b08      	subs	r3, #8
 8001e64:	009b      	lsls	r3, r3, #2
 8001e66:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	210f      	movs	r1, #15
 8001e6e:	693b      	ldr	r3, [r7, #16]
 8001e70:	fa01 f303 	lsl.w	r3, r1, r3
 8001e74:	43db      	mvns	r3, r3
 8001e76:	401a      	ands	r2, r3
 8001e78:	6a39      	ldr	r1, [r7, #32]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e80:	431a      	orrs	r2, r3
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	f000 8090 	beq.w	8001fb4 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e94:	4b56      	ldr	r3, [pc, #344]	; (8001ff0 <HAL_GPIO_Init+0x2dc>)
 8001e96:	699b      	ldr	r3, [r3, #24]
 8001e98:	4a55      	ldr	r2, [pc, #340]	; (8001ff0 <HAL_GPIO_Init+0x2dc>)
 8001e9a:	f043 0301 	orr.w	r3, r3, #1
 8001e9e:	6193      	str	r3, [r2, #24]
 8001ea0:	4b53      	ldr	r3, [pc, #332]	; (8001ff0 <HAL_GPIO_Init+0x2dc>)
 8001ea2:	699b      	ldr	r3, [r3, #24]
 8001ea4:	f003 0301 	and.w	r3, r3, #1
 8001ea8:	60bb      	str	r3, [r7, #8]
 8001eaa:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001eac:	4a51      	ldr	r2, [pc, #324]	; (8001ff4 <HAL_GPIO_Init+0x2e0>)
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	089b      	lsrs	r3, r3, #2
 8001eb2:	3302      	adds	r3, #2
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	f003 0303 	and.w	r3, r3, #3
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec8:	43db      	mvns	r3, r3
 8001eca:	68fa      	ldr	r2, [r7, #12]
 8001ecc:	4013      	ands	r3, r2
 8001ece:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4a49      	ldr	r2, [pc, #292]	; (8001ff8 <HAL_GPIO_Init+0x2e4>)
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d00d      	beq.n	8001ef4 <HAL_GPIO_Init+0x1e0>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	4a48      	ldr	r2, [pc, #288]	; (8001ffc <HAL_GPIO_Init+0x2e8>)
 8001edc:	4293      	cmp	r3, r2
 8001ede:	d007      	beq.n	8001ef0 <HAL_GPIO_Init+0x1dc>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	4a47      	ldr	r2, [pc, #284]	; (8002000 <HAL_GPIO_Init+0x2ec>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d101      	bne.n	8001eec <HAL_GPIO_Init+0x1d8>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e004      	b.n	8001ef6 <HAL_GPIO_Init+0x1e2>
 8001eec:	2303      	movs	r3, #3
 8001eee:	e002      	b.n	8001ef6 <HAL_GPIO_Init+0x1e2>
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e000      	b.n	8001ef6 <HAL_GPIO_Init+0x1e2>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ef8:	f002 0203 	and.w	r2, r2, #3
 8001efc:	0092      	lsls	r2, r2, #2
 8001efe:	4093      	lsls	r3, r2
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4313      	orrs	r3, r2
 8001f04:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001f06:	493b      	ldr	r1, [pc, #236]	; (8001ff4 <HAL_GPIO_Init+0x2e0>)
 8001f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0a:	089b      	lsrs	r3, r3, #2
 8001f0c:	3302      	adds	r3, #2
 8001f0e:	68fa      	ldr	r2, [r7, #12]
 8001f10:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d006      	beq.n	8001f2e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001f20:	4b38      	ldr	r3, [pc, #224]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f22:	689a      	ldr	r2, [r3, #8]
 8001f24:	4937      	ldr	r1, [pc, #220]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f26:	69bb      	ldr	r3, [r7, #24]
 8001f28:	4313      	orrs	r3, r2
 8001f2a:	608b      	str	r3, [r1, #8]
 8001f2c:	e006      	b.n	8001f3c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001f2e:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f30:	689a      	ldr	r2, [r3, #8]
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	43db      	mvns	r3, r3
 8001f36:	4933      	ldr	r1, [pc, #204]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f38:	4013      	ands	r3, r2
 8001f3a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d006      	beq.n	8001f56 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001f48:	4b2e      	ldr	r3, [pc, #184]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f4a:	68da      	ldr	r2, [r3, #12]
 8001f4c:	492d      	ldr	r1, [pc, #180]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	4313      	orrs	r3, r2
 8001f52:	60cb      	str	r3, [r1, #12]
 8001f54:	e006      	b.n	8001f64 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f56:	4b2b      	ldr	r3, [pc, #172]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f58:	68da      	ldr	r2, [r3, #12]
 8001f5a:	69bb      	ldr	r3, [r7, #24]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	4929      	ldr	r1, [pc, #164]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d006      	beq.n	8001f7e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f70:	4b24      	ldr	r3, [pc, #144]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f72:	685a      	ldr	r2, [r3, #4]
 8001f74:	4923      	ldr	r1, [pc, #140]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f76:	69bb      	ldr	r3, [r7, #24]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	604b      	str	r3, [r1, #4]
 8001f7c:	e006      	b.n	8001f8c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f7e:	4b21      	ldr	r3, [pc, #132]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f80:	685a      	ldr	r2, [r3, #4]
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	491f      	ldr	r1, [pc, #124]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d006      	beq.n	8001fa6 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f98:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	4919      	ldr	r1, [pc, #100]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001f9e:	69bb      	ldr	r3, [r7, #24]
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	600b      	str	r3, [r1, #0]
 8001fa4:	e006      	b.n	8001fb4 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001fa6:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	43db      	mvns	r3, r3
 8001fae:	4915      	ldr	r1, [pc, #84]	; (8002004 <HAL_GPIO_Init+0x2f0>)
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f47f aeaf 	bne.w	8001d28 <HAL_GPIO_Init+0x14>
  }
}
 8001fca:	bf00      	nop
 8001fcc:	bf00      	nop
 8001fce:	372c      	adds	r7, #44	; 0x2c
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bc80      	pop	{r7}
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	10320000 	.word	0x10320000
 8001fdc:	10310000 	.word	0x10310000
 8001fe0:	10220000 	.word	0x10220000
 8001fe4:	10210000 	.word	0x10210000
 8001fe8:	10120000 	.word	0x10120000
 8001fec:	10110000 	.word	0x10110000
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40010800 	.word	0x40010800
 8001ffc:	40010c00 	.word	0x40010c00
 8002000:	40011000 	.word	0x40011000
 8002004:	40010400 	.word	0x40010400

08002008 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	887b      	ldrh	r3, [r7, #2]
 800201a:	4013      	ands	r3, r2
 800201c:	2b00      	cmp	r3, #0
 800201e:	d002      	beq.n	8002026 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002020:	2301      	movs	r3, #1
 8002022:	73fb      	strb	r3, [r7, #15]
 8002024:	e001      	b.n	800202a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800202a:	7bfb      	ldrb	r3, [r7, #15]
}
 800202c:	4618      	mov	r0, r3
 800202e:	3714      	adds	r7, #20
 8002030:	46bd      	mov	sp, r7
 8002032:	bc80      	pop	{r7}
 8002034:	4770      	bx	lr

08002036 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002036:	b480      	push	{r7}
 8002038:	b083      	sub	sp, #12
 800203a:	af00      	add	r7, sp, #0
 800203c:	6078      	str	r0, [r7, #4]
 800203e:	460b      	mov	r3, r1
 8002040:	807b      	strh	r3, [r7, #2]
 8002042:	4613      	mov	r3, r2
 8002044:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002046:	787b      	ldrb	r3, [r7, #1]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d003      	beq.n	8002054 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800204c:	887a      	ldrh	r2, [r7, #2]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002052:	e003      	b.n	800205c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002054:	887b      	ldrh	r3, [r7, #2]
 8002056:	041a      	lsls	r2, r3, #16
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	611a      	str	r2, [r3, #16]
}
 800205c:	bf00      	nop
 800205e:	370c      	adds	r7, #12
 8002060:	46bd      	mov	sp, r7
 8002062:	bc80      	pop	{r7}
 8002064:	4770      	bx	lr

08002066 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002066:	b480      	push	{r7}
 8002068:	b085      	sub	sp, #20
 800206a:	af00      	add	r7, sp, #0
 800206c:	6078      	str	r0, [r7, #4]
 800206e:	460b      	mov	r3, r1
 8002070:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002078:	887a      	ldrh	r2, [r7, #2]
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	4013      	ands	r3, r2
 800207e:	041a      	lsls	r2, r3, #16
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	43d9      	mvns	r1, r3
 8002084:	887b      	ldrh	r3, [r7, #2]
 8002086:	400b      	ands	r3, r1
 8002088:	431a      	orrs	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	611a      	str	r2, [r3, #16]
}
 800208e:	bf00      	nop
 8002090:	3714      	adds	r7, #20
 8002092:	46bd      	mov	sp, r7
 8002094:	bc80      	pop	{r7}
 8002096:	4770      	bx	lr

08002098 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b086      	sub	sp, #24
 800209c:	af00      	add	r7, sp, #0
 800209e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d101      	bne.n	80020aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020a6:	2301      	movs	r3, #1
 80020a8:	e26c      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	f003 0301 	and.w	r3, r3, #1
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	f000 8087 	beq.w	80021c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020b8:	4b92      	ldr	r3, [pc, #584]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 030c 	and.w	r3, r3, #12
 80020c0:	2b04      	cmp	r3, #4
 80020c2:	d00c      	beq.n	80020de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80020c4:	4b8f      	ldr	r3, [pc, #572]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 030c 	and.w	r3, r3, #12
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d112      	bne.n	80020f6 <HAL_RCC_OscConfig+0x5e>
 80020d0:	4b8c      	ldr	r3, [pc, #560]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020dc:	d10b      	bne.n	80020f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020de:	4b89      	ldr	r3, [pc, #548]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d06c      	beq.n	80021c4 <HAL_RCC_OscConfig+0x12c>
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d168      	bne.n	80021c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e246      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020fe:	d106      	bne.n	800210e <HAL_RCC_OscConfig+0x76>
 8002100:	4b80      	ldr	r3, [pc, #512]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a7f      	ldr	r2, [pc, #508]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002106:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800210a:	6013      	str	r3, [r2, #0]
 800210c:	e02e      	b.n	800216c <HAL_RCC_OscConfig+0xd4>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10c      	bne.n	8002130 <HAL_RCC_OscConfig+0x98>
 8002116:	4b7b      	ldr	r3, [pc, #492]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a7a      	ldr	r2, [pc, #488]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 800211c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002120:	6013      	str	r3, [r2, #0]
 8002122:	4b78      	ldr	r3, [pc, #480]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a77      	ldr	r2, [pc, #476]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002128:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800212c:	6013      	str	r3, [r2, #0]
 800212e:	e01d      	b.n	800216c <HAL_RCC_OscConfig+0xd4>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002138:	d10c      	bne.n	8002154 <HAL_RCC_OscConfig+0xbc>
 800213a:	4b72      	ldr	r3, [pc, #456]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a71      	ldr	r2, [pc, #452]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002140:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	4b6f      	ldr	r3, [pc, #444]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a6e      	ldr	r2, [pc, #440]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e00b      	b.n	800216c <HAL_RCC_OscConfig+0xd4>
 8002154:	4b6b      	ldr	r3, [pc, #428]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a6a      	ldr	r2, [pc, #424]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 800215a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	4b68      	ldr	r3, [pc, #416]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a67      	ldr	r2, [pc, #412]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800216a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d013      	beq.n	800219c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002174:	f7ff fcb6 	bl	8001ae4 <HAL_GetTick>
 8002178:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800217a:	e008      	b.n	800218e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800217c:	f7ff fcb2 	bl	8001ae4 <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	2b64      	cmp	r3, #100	; 0x64
 8002188:	d901      	bls.n	800218e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800218a:	2303      	movs	r3, #3
 800218c:	e1fa      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218e:	4b5d      	ldr	r3, [pc, #372]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002196:	2b00      	cmp	r3, #0
 8002198:	d0f0      	beq.n	800217c <HAL_RCC_OscConfig+0xe4>
 800219a:	e014      	b.n	80021c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219c:	f7ff fca2 	bl	8001ae4 <HAL_GetTick>
 80021a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a4:	f7ff fc9e 	bl	8001ae4 <HAL_GetTick>
 80021a8:	4602      	mov	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b64      	cmp	r3, #100	; 0x64
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e1e6      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b6:	4b53      	ldr	r3, [pc, #332]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x10c>
 80021c2:	e000      	b.n	80021c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d063      	beq.n	800229a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021d2:	4b4c      	ldr	r3, [pc, #304]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f003 030c 	and.w	r3, r3, #12
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d00b      	beq.n	80021f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80021de:	4b49      	ldr	r3, [pc, #292]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 030c 	and.w	r3, r3, #12
 80021e6:	2b08      	cmp	r3, #8
 80021e8:	d11c      	bne.n	8002224 <HAL_RCC_OscConfig+0x18c>
 80021ea:	4b46      	ldr	r3, [pc, #280]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d116      	bne.n	8002224 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	4b43      	ldr	r3, [pc, #268]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f003 0302 	and.w	r3, r3, #2
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d005      	beq.n	800220e <HAL_RCC_OscConfig+0x176>
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	691b      	ldr	r3, [r3, #16]
 8002206:	2b01      	cmp	r3, #1
 8002208:	d001      	beq.n	800220e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800220a:	2301      	movs	r3, #1
 800220c:	e1ba      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800220e:	4b3d      	ldr	r3, [pc, #244]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	695b      	ldr	r3, [r3, #20]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4939      	ldr	r1, [pc, #228]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 800221e:	4313      	orrs	r3, r2
 8002220:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002222:	e03a      	b.n	800229a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	691b      	ldr	r3, [r3, #16]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d020      	beq.n	800226e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800222c:	4b36      	ldr	r3, [pc, #216]	; (8002308 <HAL_RCC_OscConfig+0x270>)
 800222e:	2201      	movs	r2, #1
 8002230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002232:	f7ff fc57 	bl	8001ae4 <HAL_GetTick>
 8002236:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002238:	e008      	b.n	800224c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800223a:	f7ff fc53 	bl	8001ae4 <HAL_GetTick>
 800223e:	4602      	mov	r2, r0
 8002240:	693b      	ldr	r3, [r7, #16]
 8002242:	1ad3      	subs	r3, r2, r3
 8002244:	2b02      	cmp	r3, #2
 8002246:	d901      	bls.n	800224c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002248:	2303      	movs	r3, #3
 800224a:	e19b      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224c:	4b2d      	ldr	r3, [pc, #180]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f003 0302 	and.w	r3, r3, #2
 8002254:	2b00      	cmp	r3, #0
 8002256:	d0f0      	beq.n	800223a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002258:	4b2a      	ldr	r3, [pc, #168]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	00db      	lsls	r3, r3, #3
 8002266:	4927      	ldr	r1, [pc, #156]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002268:	4313      	orrs	r3, r2
 800226a:	600b      	str	r3, [r1, #0]
 800226c:	e015      	b.n	800229a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226e:	4b26      	ldr	r3, [pc, #152]	; (8002308 <HAL_RCC_OscConfig+0x270>)
 8002270:	2200      	movs	r2, #0
 8002272:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002274:	f7ff fc36 	bl	8001ae4 <HAL_GetTick>
 8002278:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800227a:	e008      	b.n	800228e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800227c:	f7ff fc32 	bl	8001ae4 <HAL_GetTick>
 8002280:	4602      	mov	r2, r0
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	1ad3      	subs	r3, r2, r3
 8002286:	2b02      	cmp	r3, #2
 8002288:	d901      	bls.n	800228e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800228a:	2303      	movs	r3, #3
 800228c:	e17a      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228e:	4b1d      	ldr	r3, [pc, #116]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 0302 	and.w	r3, r3, #2
 8002296:	2b00      	cmp	r3, #0
 8002298:	d1f0      	bne.n	800227c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d03a      	beq.n	800231c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d019      	beq.n	80022e2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ae:	4b17      	ldr	r3, [pc, #92]	; (800230c <HAL_RCC_OscConfig+0x274>)
 80022b0:	2201      	movs	r2, #1
 80022b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b4:	f7ff fc16 	bl	8001ae4 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022bc:	f7ff fc12 	bl	8001ae4 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e15a      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ce:	4b0d      	ldr	r3, [pc, #52]	; (8002304 <HAL_RCC_OscConfig+0x26c>)
 80022d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d0f0      	beq.n	80022bc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80022da:	2001      	movs	r0, #1
 80022dc:	f000 fa9a 	bl	8002814 <RCC_Delay>
 80022e0:	e01c      	b.n	800231c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022e2:	4b0a      	ldr	r3, [pc, #40]	; (800230c <HAL_RCC_OscConfig+0x274>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022e8:	f7ff fbfc 	bl	8001ae4 <HAL_GetTick>
 80022ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022ee:	e00f      	b.n	8002310 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f0:	f7ff fbf8 	bl	8001ae4 <HAL_GetTick>
 80022f4:	4602      	mov	r2, r0
 80022f6:	693b      	ldr	r3, [r7, #16]
 80022f8:	1ad3      	subs	r3, r2, r3
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d908      	bls.n	8002310 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80022fe:	2303      	movs	r3, #3
 8002300:	e140      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
 8002302:	bf00      	nop
 8002304:	40021000 	.word	0x40021000
 8002308:	42420000 	.word	0x42420000
 800230c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002310:	4b9e      	ldr	r3, [pc, #632]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 8002312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1e9      	bne.n	80022f0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f003 0304 	and.w	r3, r3, #4
 8002324:	2b00      	cmp	r3, #0
 8002326:	f000 80a6 	beq.w	8002476 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800232a:	2300      	movs	r3, #0
 800232c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800232e:	4b97      	ldr	r3, [pc, #604]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d10d      	bne.n	8002356 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800233a:	4b94      	ldr	r3, [pc, #592]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 800233c:	69db      	ldr	r3, [r3, #28]
 800233e:	4a93      	ldr	r2, [pc, #588]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 8002340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002344:	61d3      	str	r3, [r2, #28]
 8002346:	4b91      	ldr	r3, [pc, #580]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 8002348:	69db      	ldr	r3, [r3, #28]
 800234a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800234e:	60bb      	str	r3, [r7, #8]
 8002350:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002352:	2301      	movs	r3, #1
 8002354:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002356:	4b8e      	ldr	r3, [pc, #568]	; (8002590 <HAL_RCC_OscConfig+0x4f8>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d118      	bne.n	8002394 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002362:	4b8b      	ldr	r3, [pc, #556]	; (8002590 <HAL_RCC_OscConfig+0x4f8>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a8a      	ldr	r2, [pc, #552]	; (8002590 <HAL_RCC_OscConfig+0x4f8>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236e:	f7ff fbb9 	bl	8001ae4 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002376:	f7ff fbb5 	bl	8001ae4 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b64      	cmp	r3, #100	; 0x64
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e0fd      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002388:	4b81      	ldr	r3, [pc, #516]	; (8002590 <HAL_RCC_OscConfig+0x4f8>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	2b01      	cmp	r3, #1
 800239a:	d106      	bne.n	80023aa <HAL_RCC_OscConfig+0x312>
 800239c:	4b7b      	ldr	r3, [pc, #492]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 800239e:	6a1b      	ldr	r3, [r3, #32]
 80023a0:	4a7a      	ldr	r2, [pc, #488]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80023a2:	f043 0301 	orr.w	r3, r3, #1
 80023a6:	6213      	str	r3, [r2, #32]
 80023a8:	e02d      	b.n	8002406 <HAL_RCC_OscConfig+0x36e>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	68db      	ldr	r3, [r3, #12]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d10c      	bne.n	80023cc <HAL_RCC_OscConfig+0x334>
 80023b2:	4b76      	ldr	r3, [pc, #472]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80023b4:	6a1b      	ldr	r3, [r3, #32]
 80023b6:	4a75      	ldr	r2, [pc, #468]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80023b8:	f023 0301 	bic.w	r3, r3, #1
 80023bc:	6213      	str	r3, [r2, #32]
 80023be:	4b73      	ldr	r3, [pc, #460]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	4a72      	ldr	r2, [pc, #456]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80023c4:	f023 0304 	bic.w	r3, r3, #4
 80023c8:	6213      	str	r3, [r2, #32]
 80023ca:	e01c      	b.n	8002406 <HAL_RCC_OscConfig+0x36e>
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b05      	cmp	r3, #5
 80023d2:	d10c      	bne.n	80023ee <HAL_RCC_OscConfig+0x356>
 80023d4:	4b6d      	ldr	r3, [pc, #436]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4a6c      	ldr	r2, [pc, #432]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80023da:	f043 0304 	orr.w	r3, r3, #4
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	4b6a      	ldr	r3, [pc, #424]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4a69      	ldr	r2, [pc, #420]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80023e6:	f043 0301 	orr.w	r3, r3, #1
 80023ea:	6213      	str	r3, [r2, #32]
 80023ec:	e00b      	b.n	8002406 <HAL_RCC_OscConfig+0x36e>
 80023ee:	4b67      	ldr	r3, [pc, #412]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80023f0:	6a1b      	ldr	r3, [r3, #32]
 80023f2:	4a66      	ldr	r2, [pc, #408]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80023f4:	f023 0301 	bic.w	r3, r3, #1
 80023f8:	6213      	str	r3, [r2, #32]
 80023fa:	4b64      	ldr	r3, [pc, #400]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80023fc:	6a1b      	ldr	r3, [r3, #32]
 80023fe:	4a63      	ldr	r2, [pc, #396]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 8002400:	f023 0304 	bic.w	r3, r3, #4
 8002404:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d015      	beq.n	800243a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800240e:	f7ff fb69 	bl	8001ae4 <HAL_GetTick>
 8002412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002414:	e00a      	b.n	800242c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002416:	f7ff fb65 	bl	8001ae4 <HAL_GetTick>
 800241a:	4602      	mov	r2, r0
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	1ad3      	subs	r3, r2, r3
 8002420:	f241 3288 	movw	r2, #5000	; 0x1388
 8002424:	4293      	cmp	r3, r2
 8002426:	d901      	bls.n	800242c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002428:	2303      	movs	r3, #3
 800242a:	e0ab      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800242c:	4b57      	ldr	r3, [pc, #348]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 800242e:	6a1b      	ldr	r3, [r3, #32]
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	2b00      	cmp	r3, #0
 8002436:	d0ee      	beq.n	8002416 <HAL_RCC_OscConfig+0x37e>
 8002438:	e014      	b.n	8002464 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243a:	f7ff fb53 	bl	8001ae4 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002440:	e00a      	b.n	8002458 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002442:	f7ff fb4f 	bl	8001ae4 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002450:	4293      	cmp	r3, r2
 8002452:	d901      	bls.n	8002458 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002454:	2303      	movs	r3, #3
 8002456:	e095      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002458:	4b4c      	ldr	r3, [pc, #304]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 800245a:	6a1b      	ldr	r3, [r3, #32]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d1ee      	bne.n	8002442 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002464:	7dfb      	ldrb	r3, [r7, #23]
 8002466:	2b01      	cmp	r3, #1
 8002468:	d105      	bne.n	8002476 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800246a:	4b48      	ldr	r3, [pc, #288]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	4a47      	ldr	r2, [pc, #284]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 8002470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002474:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	69db      	ldr	r3, [r3, #28]
 800247a:	2b00      	cmp	r3, #0
 800247c:	f000 8081 	beq.w	8002582 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002480:	4b42      	ldr	r3, [pc, #264]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f003 030c 	and.w	r3, r3, #12
 8002488:	2b08      	cmp	r3, #8
 800248a:	d061      	beq.n	8002550 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	69db      	ldr	r3, [r3, #28]
 8002490:	2b02      	cmp	r3, #2
 8002492:	d146      	bne.n	8002522 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002494:	4b3f      	ldr	r3, [pc, #252]	; (8002594 <HAL_RCC_OscConfig+0x4fc>)
 8002496:	2200      	movs	r2, #0
 8002498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800249a:	f7ff fb23 	bl	8001ae4 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024a2:	f7ff fb1f 	bl	8001ae4 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b02      	cmp	r3, #2
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e067      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b4:	4b35      	ldr	r3, [pc, #212]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d1f0      	bne.n	80024a2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a1b      	ldr	r3, [r3, #32]
 80024c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80024c8:	d108      	bne.n	80024dc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80024ca:	4b30      	ldr	r3, [pc, #192]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	492d      	ldr	r1, [pc, #180]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80024dc:	4b2b      	ldr	r3, [pc, #172]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a19      	ldr	r1, [r3, #32]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ec:	430b      	orrs	r3, r1
 80024ee:	4927      	ldr	r1, [pc, #156]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024f4:	4b27      	ldr	r3, [pc, #156]	; (8002594 <HAL_RCC_OscConfig+0x4fc>)
 80024f6:	2201      	movs	r2, #1
 80024f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024fa:	f7ff faf3 	bl	8001ae4 <HAL_GetTick>
 80024fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002500:	e008      	b.n	8002514 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002502:	f7ff faef 	bl	8001ae4 <HAL_GetTick>
 8002506:	4602      	mov	r2, r0
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	1ad3      	subs	r3, r2, r3
 800250c:	2b02      	cmp	r3, #2
 800250e:	d901      	bls.n	8002514 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002510:	2303      	movs	r3, #3
 8002512:	e037      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002514:	4b1d      	ldr	r3, [pc, #116]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d0f0      	beq.n	8002502 <HAL_RCC_OscConfig+0x46a>
 8002520:	e02f      	b.n	8002582 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002522:	4b1c      	ldr	r3, [pc, #112]	; (8002594 <HAL_RCC_OscConfig+0x4fc>)
 8002524:	2200      	movs	r2, #0
 8002526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002528:	f7ff fadc 	bl	8001ae4 <HAL_GetTick>
 800252c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800252e:	e008      	b.n	8002542 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002530:	f7ff fad8 	bl	8001ae4 <HAL_GetTick>
 8002534:	4602      	mov	r2, r0
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	1ad3      	subs	r3, r2, r3
 800253a:	2b02      	cmp	r3, #2
 800253c:	d901      	bls.n	8002542 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800253e:	2303      	movs	r3, #3
 8002540:	e020      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002542:	4b12      	ldr	r3, [pc, #72]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1f0      	bne.n	8002530 <HAL_RCC_OscConfig+0x498>
 800254e:	e018      	b.n	8002582 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	69db      	ldr	r3, [r3, #28]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e013      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_RCC_OscConfig+0x4f4>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a1b      	ldr	r3, [r3, #32]
 800256c:	429a      	cmp	r2, r3
 800256e:	d106      	bne.n	800257e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d001      	beq.n	8002582 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800257e:	2301      	movs	r3, #1
 8002580:	e000      	b.n	8002584 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002582:	2300      	movs	r3, #0
}
 8002584:	4618      	mov	r0, r3
 8002586:	3718      	adds	r7, #24
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	40021000 	.word	0x40021000
 8002590:	40007000 	.word	0x40007000
 8002594:	42420060 	.word	0x42420060

08002598 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b084      	sub	sp, #16
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
 80025a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d101      	bne.n	80025ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80025a8:	2301      	movs	r3, #1
 80025aa:	e0d0      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80025ac:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	f003 0307 	and.w	r3, r3, #7
 80025b4:	683a      	ldr	r2, [r7, #0]
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d910      	bls.n	80025dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025ba:	4b67      	ldr	r3, [pc, #412]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f023 0207 	bic.w	r2, r3, #7
 80025c2:	4965      	ldr	r1, [pc, #404]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80025ca:	4b63      	ldr	r3, [pc, #396]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	683a      	ldr	r2, [r7, #0]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d001      	beq.n	80025dc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0b8      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d020      	beq.n	800262a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f003 0304 	and.w	r3, r3, #4
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d005      	beq.n	8002600 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80025f4:	4b59      	ldr	r3, [pc, #356]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	4a58      	ldr	r2, [pc, #352]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 80025fa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80025fe:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0308 	and.w	r3, r3, #8
 8002608:	2b00      	cmp	r3, #0
 800260a:	d005      	beq.n	8002618 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800260c:	4b53      	ldr	r3, [pc, #332]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	4a52      	ldr	r2, [pc, #328]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002612:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002616:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002618:	4b50      	ldr	r3, [pc, #320]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	494d      	ldr	r1, [pc, #308]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 0301 	and.w	r3, r3, #1
 8002632:	2b00      	cmp	r3, #0
 8002634:	d040      	beq.n	80026b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d107      	bne.n	800264e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800263e:	4b47      	ldr	r3, [pc, #284]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d115      	bne.n	8002676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e07f      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	2b02      	cmp	r3, #2
 8002654:	d107      	bne.n	8002666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002656:	4b41      	ldr	r3, [pc, #260]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800265e:	2b00      	cmp	r3, #0
 8002660:	d109      	bne.n	8002676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002662:	2301      	movs	r3, #1
 8002664:	e073      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002666:	4b3d      	ldr	r3, [pc, #244]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0302 	and.w	r3, r3, #2
 800266e:	2b00      	cmp	r3, #0
 8002670:	d101      	bne.n	8002676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002672:	2301      	movs	r3, #1
 8002674:	e06b      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002676:	4b39      	ldr	r3, [pc, #228]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	f023 0203 	bic.w	r2, r3, #3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	4936      	ldr	r1, [pc, #216]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002684:	4313      	orrs	r3, r2
 8002686:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002688:	f7ff fa2c 	bl	8001ae4 <HAL_GetTick>
 800268c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800268e:	e00a      	b.n	80026a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002690:	f7ff fa28 	bl	8001ae4 <HAL_GetTick>
 8002694:	4602      	mov	r2, r0
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	1ad3      	subs	r3, r2, r3
 800269a:	f241 3288 	movw	r2, #5000	; 0x1388
 800269e:	4293      	cmp	r3, r2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e053      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80026a6:	4b2d      	ldr	r3, [pc, #180]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 80026a8:	685b      	ldr	r3, [r3, #4]
 80026aa:	f003 020c 	and.w	r2, r3, #12
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	685b      	ldr	r3, [r3, #4]
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	429a      	cmp	r2, r3
 80026b6:	d1eb      	bne.n	8002690 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026b8:	4b27      	ldr	r3, [pc, #156]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0307 	and.w	r3, r3, #7
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	429a      	cmp	r2, r3
 80026c4:	d210      	bcs.n	80026e8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026c6:	4b24      	ldr	r3, [pc, #144]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f023 0207 	bic.w	r2, r3, #7
 80026ce:	4922      	ldr	r1, [pc, #136]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	4313      	orrs	r3, r2
 80026d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026d6:	4b20      	ldr	r3, [pc, #128]	; (8002758 <HAL_RCC_ClockConfig+0x1c0>)
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0307 	and.w	r3, r3, #7
 80026de:	683a      	ldr	r2, [r7, #0]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d001      	beq.n	80026e8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e032      	b.n	800274e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f003 0304 	and.w	r3, r3, #4
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d008      	beq.n	8002706 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026f4:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	68db      	ldr	r3, [r3, #12]
 8002700:	4916      	ldr	r1, [pc, #88]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002702:	4313      	orrs	r3, r2
 8002704:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b00      	cmp	r3, #0
 8002710:	d009      	beq.n	8002726 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002712:	4b12      	ldr	r3, [pc, #72]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	00db      	lsls	r3, r3, #3
 8002720:	490e      	ldr	r1, [pc, #56]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 8002722:	4313      	orrs	r3, r2
 8002724:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002726:	f000 f821 	bl	800276c <HAL_RCC_GetSysClockFreq>
 800272a:	4602      	mov	r2, r0
 800272c:	4b0b      	ldr	r3, [pc, #44]	; (800275c <HAL_RCC_ClockConfig+0x1c4>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	091b      	lsrs	r3, r3, #4
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	490a      	ldr	r1, [pc, #40]	; (8002760 <HAL_RCC_ClockConfig+0x1c8>)
 8002738:	5ccb      	ldrb	r3, [r1, r3]
 800273a:	fa22 f303 	lsr.w	r3, r2, r3
 800273e:	4a09      	ldr	r2, [pc, #36]	; (8002764 <HAL_RCC_ClockConfig+0x1cc>)
 8002740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_RCC_ClockConfig+0x1d0>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff f98a 	bl	8001a60 <HAL_InitTick>

  return HAL_OK;
 800274c:	2300      	movs	r3, #0
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}
 8002756:	bf00      	nop
 8002758:	40022000 	.word	0x40022000
 800275c:	40021000 	.word	0x40021000
 8002760:	08003090 	.word	0x08003090
 8002764:	20000030 	.word	0x20000030
 8002768:	20000034 	.word	0x20000034

0800276c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800276c:	b480      	push	{r7}
 800276e:	b087      	sub	sp, #28
 8002770:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002772:	2300      	movs	r3, #0
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	2300      	movs	r3, #0
 8002778:	60bb      	str	r3, [r7, #8]
 800277a:	2300      	movs	r3, #0
 800277c:	617b      	str	r3, [r7, #20]
 800277e:	2300      	movs	r3, #0
 8002780:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002786:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <HAL_RCC_GetSysClockFreq+0x94>)
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	f003 030c 	and.w	r3, r3, #12
 8002792:	2b04      	cmp	r3, #4
 8002794:	d002      	beq.n	800279c <HAL_RCC_GetSysClockFreq+0x30>
 8002796:	2b08      	cmp	r3, #8
 8002798:	d003      	beq.n	80027a2 <HAL_RCC_GetSysClockFreq+0x36>
 800279a:	e027      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800279c:	4b19      	ldr	r3, [pc, #100]	; (8002804 <HAL_RCC_GetSysClockFreq+0x98>)
 800279e:	613b      	str	r3, [r7, #16]
      break;
 80027a0:	e027      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	0c9b      	lsrs	r3, r3, #18
 80027a6:	f003 030f 	and.w	r3, r3, #15
 80027aa:	4a17      	ldr	r2, [pc, #92]	; (8002808 <HAL_RCC_GetSysClockFreq+0x9c>)
 80027ac:	5cd3      	ldrb	r3, [r2, r3]
 80027ae:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d010      	beq.n	80027dc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <HAL_RCC_GetSysClockFreq+0x94>)
 80027bc:	685b      	ldr	r3, [r3, #4]
 80027be:	0c5b      	lsrs	r3, r3, #17
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	4a11      	ldr	r2, [pc, #68]	; (800280c <HAL_RCC_GetSysClockFreq+0xa0>)
 80027c6:	5cd3      	ldrb	r3, [r2, r3]
 80027c8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a0d      	ldr	r2, [pc, #52]	; (8002804 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ce:	fb02 f203 	mul.w	r2, r2, r3
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	617b      	str	r3, [r7, #20]
 80027da:	e004      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	4a0c      	ldr	r2, [pc, #48]	; (8002810 <HAL_RCC_GetSysClockFreq+0xa4>)
 80027e0:	fb02 f303 	mul.w	r3, r2, r3
 80027e4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	613b      	str	r3, [r7, #16]
      break;
 80027ea:	e002      	b.n	80027f2 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_RCC_GetSysClockFreq+0x98>)
 80027ee:	613b      	str	r3, [r7, #16]
      break;
 80027f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027f2:	693b      	ldr	r3, [r7, #16]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	371c      	adds	r7, #28
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bc80      	pop	{r7}
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40021000 	.word	0x40021000
 8002804:	007a1200 	.word	0x007a1200
 8002808:	080030a0 	.word	0x080030a0
 800280c:	080030b0 	.word	0x080030b0
 8002810:	003d0900 	.word	0x003d0900

08002814 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800281c:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <RCC_Delay+0x34>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a0a      	ldr	r2, [pc, #40]	; (800284c <RCC_Delay+0x38>)
 8002822:	fba2 2303 	umull	r2, r3, r2, r3
 8002826:	0a5b      	lsrs	r3, r3, #9
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	fb02 f303 	mul.w	r3, r2, r3
 800282e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002830:	bf00      	nop
  }
  while (Delay --);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	1e5a      	subs	r2, r3, #1
 8002836:	60fa      	str	r2, [r7, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d1f9      	bne.n	8002830 <RCC_Delay+0x1c>
}
 800283c:	bf00      	nop
 800283e:	bf00      	nop
 8002840:	3714      	adds	r7, #20
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	20000030 	.word	0x20000030
 800284c:	10624dd3 	.word	0x10624dd3

08002850 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e041      	b.n	80028e6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002868:	b2db      	uxtb	r3, r3
 800286a:	2b00      	cmp	r3, #0
 800286c:	d106      	bne.n	800287c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff f85a 	bl	8001930 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681a      	ldr	r2, [r3, #0]
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	3304      	adds	r3, #4
 800288c:	4619      	mov	r1, r3
 800288e:	4610      	mov	r0, r2
 8002890:	f000 fa6e 	bl	8002d70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2201      	movs	r2, #1
 8002898:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2201      	movs	r2, #1
 80028a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2201      	movs	r2, #1
 80028a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028e4:	2300      	movs	r3, #0
}
 80028e6:	4618      	mov	r0, r3
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
	...

080028f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028fe:	b2db      	uxtb	r3, r3
 8002900:	2b01      	cmp	r3, #1
 8002902:	d001      	beq.n	8002908 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002904:	2301      	movs	r3, #1
 8002906:	e035      	b.n	8002974 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2202      	movs	r2, #2
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68da      	ldr	r2, [r3, #12]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f042 0201 	orr.w	r2, r2, #1
 800291e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a16      	ldr	r2, [pc, #88]	; (8002980 <HAL_TIM_Base_Start_IT+0x90>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d009      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x4e>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002932:	d004      	beq.n	800293e <HAL_TIM_Base_Start_IT+0x4e>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a12      	ldr	r2, [pc, #72]	; (8002984 <HAL_TIM_Base_Start_IT+0x94>)
 800293a:	4293      	cmp	r3, r2
 800293c:	d111      	bne.n	8002962 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	f003 0307 	and.w	r3, r3, #7
 8002948:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2b06      	cmp	r3, #6
 800294e:	d010      	beq.n	8002972 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	681a      	ldr	r2, [r3, #0]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f042 0201 	orr.w	r2, r2, #1
 800295e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002960:	e007      	b.n	8002972 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f042 0201 	orr.w	r2, r2, #1
 8002970:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
}
 8002974:	4618      	mov	r0, r3
 8002976:	3714      	adds	r7, #20
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40000400 	.word	0x40000400

08002988 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0302 	and.w	r3, r3, #2
 800299a:	2b02      	cmp	r3, #2
 800299c:	d122      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d11b      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0202 	mvn.w	r2, #2
 80029b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2201      	movs	r2, #1
 80029ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 f9b4 	bl	8002d38 <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 f9a7 	bl	8002d26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f9b6 	bl	8002d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b04      	cmp	r3, #4
 80029f0:	d122      	bne.n	8002a38 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0304 	and.w	r3, r3, #4
 80029fc:	2b04      	cmp	r3, #4
 80029fe:	d11b      	bne.n	8002a38 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0204 	mvn.w	r2, #4
 8002a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	699b      	ldr	r3, [r3, #24]
 8002a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 f98a 	bl	8002d38 <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f97d 	bl	8002d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 f98c 	bl	8002d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0308 	and.w	r3, r3, #8
 8002a42:	2b08      	cmp	r3, #8
 8002a44:	d122      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0308 	and.w	r3, r3, #8
 8002a50:	2b08      	cmp	r3, #8
 8002a52:	d11b      	bne.n	8002a8c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0208 	mvn.w	r2, #8
 8002a5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2204      	movs	r2, #4
 8002a62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 f960 	bl	8002d38 <HAL_TIM_IC_CaptureCallback>
 8002a78:	e005      	b.n	8002a86 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f000 f953 	bl	8002d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a80:	6878      	ldr	r0, [r7, #4]
 8002a82:	f000 f962 	bl	8002d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0310 	and.w	r3, r3, #16
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d122      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	f003 0310 	and.w	r3, r3, #16
 8002aa4:	2b10      	cmp	r3, #16
 8002aa6:	d11b      	bne.n	8002ae0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f06f 0210 	mvn.w	r2, #16
 8002ab0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	69db      	ldr	r3, [r3, #28]
 8002abe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d003      	beq.n	8002ace <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f000 f936 	bl	8002d38 <HAL_TIM_IC_CaptureCallback>
 8002acc:	e005      	b.n	8002ada <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ace:	6878      	ldr	r0, [r7, #4]
 8002ad0:	f000 f929 	bl	8002d26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ad4:	6878      	ldr	r0, [r7, #4]
 8002ad6:	f000 f938 	bl	8002d4a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	691b      	ldr	r3, [r3, #16]
 8002ae6:	f003 0301 	and.w	r3, r3, #1
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d10e      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d107      	bne.n	8002b0c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f06f 0201 	mvn.w	r2, #1
 8002b04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7fe fe4c 	bl	80017a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	691b      	ldr	r3, [r3, #16]
 8002b12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b16:	2b80      	cmp	r3, #128	; 0x80
 8002b18:	d10e      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68db      	ldr	r3, [r3, #12]
 8002b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d107      	bne.n	8002b38 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 fa6b 	bl	800300e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	691b      	ldr	r3, [r3, #16]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b42:	2b40      	cmp	r3, #64	; 0x40
 8002b44:	d10e      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b50:	2b40      	cmp	r3, #64	; 0x40
 8002b52:	d107      	bne.n	8002b64 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002b5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002b5e:	6878      	ldr	r0, [r7, #4]
 8002b60:	f000 f8fc 	bl	8002d5c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	f003 0320 	and.w	r3, r3, #32
 8002b6e:	2b20      	cmp	r3, #32
 8002b70:	d10e      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	f003 0320 	and.w	r3, r3, #32
 8002b7c:	2b20      	cmp	r3, #32
 8002b7e:	d107      	bne.n	8002b90 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f06f 0220 	mvn.w	r2, #32
 8002b88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f000 fa36 	bl	8002ffc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b90:	bf00      	nop
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b084      	sub	sp, #16
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d101      	bne.n	8002bb4 <HAL_TIM_ConfigClockSource+0x1c>
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	e0b4      	b.n	8002d1e <HAL_TIM_ConfigClockSource+0x186>
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2201      	movs	r2, #1
 8002bb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2202      	movs	r2, #2
 8002bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	689b      	ldr	r3, [r3, #8]
 8002bca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bd4:	68bb      	ldr	r3, [r7, #8]
 8002bd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bda:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	68ba      	ldr	r2, [r7, #8]
 8002be2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bec:	d03e      	beq.n	8002c6c <HAL_TIM_ConfigClockSource+0xd4>
 8002bee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bf2:	f200 8087 	bhi.w	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bfa:	f000 8086 	beq.w	8002d0a <HAL_TIM_ConfigClockSource+0x172>
 8002bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c02:	d87f      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c04:	2b70      	cmp	r3, #112	; 0x70
 8002c06:	d01a      	beq.n	8002c3e <HAL_TIM_ConfigClockSource+0xa6>
 8002c08:	2b70      	cmp	r3, #112	; 0x70
 8002c0a:	d87b      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c0c:	2b60      	cmp	r3, #96	; 0x60
 8002c0e:	d050      	beq.n	8002cb2 <HAL_TIM_ConfigClockSource+0x11a>
 8002c10:	2b60      	cmp	r3, #96	; 0x60
 8002c12:	d877      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c14:	2b50      	cmp	r3, #80	; 0x50
 8002c16:	d03c      	beq.n	8002c92 <HAL_TIM_ConfigClockSource+0xfa>
 8002c18:	2b50      	cmp	r3, #80	; 0x50
 8002c1a:	d873      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c1c:	2b40      	cmp	r3, #64	; 0x40
 8002c1e:	d058      	beq.n	8002cd2 <HAL_TIM_ConfigClockSource+0x13a>
 8002c20:	2b40      	cmp	r3, #64	; 0x40
 8002c22:	d86f      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c24:	2b30      	cmp	r3, #48	; 0x30
 8002c26:	d064      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c28:	2b30      	cmp	r3, #48	; 0x30
 8002c2a:	d86b      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d060      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	d867      	bhi.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d05c      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c38:	2b10      	cmp	r3, #16
 8002c3a:	d05a      	beq.n	8002cf2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c3c:	e062      	b.n	8002d04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6818      	ldr	r0, [r3, #0]
 8002c42:	683b      	ldr	r3, [r7, #0]
 8002c44:	6899      	ldr	r1, [r3, #8]
 8002c46:	683b      	ldr	r3, [r7, #0]
 8002c48:	685a      	ldr	r2, [r3, #4]
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f000 f95e 	bl	8002f0e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	609a      	str	r2, [r3, #8]
      break;
 8002c6a:	e04f      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	6899      	ldr	r1, [r3, #8]
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685a      	ldr	r2, [r3, #4]
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	f000 f947 	bl	8002f0e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c8e:	609a      	str	r2, [r3, #8]
      break;
 8002c90:	e03c      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6818      	ldr	r0, [r3, #0]
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	6859      	ldr	r1, [r3, #4]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	68db      	ldr	r3, [r3, #12]
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	f000 f8be 	bl	8002e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2150      	movs	r1, #80	; 0x50
 8002caa:	4618      	mov	r0, r3
 8002cac:	f000 f915 	bl	8002eda <TIM_ITRx_SetConfig>
      break;
 8002cb0:	e02c      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6818      	ldr	r0, [r3, #0]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	6859      	ldr	r1, [r3, #4]
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	68db      	ldr	r3, [r3, #12]
 8002cbe:	461a      	mov	r2, r3
 8002cc0:	f000 f8dc 	bl	8002e7c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2160      	movs	r1, #96	; 0x60
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f000 f905 	bl	8002eda <TIM_ITRx_SetConfig>
      break;
 8002cd0:	e01c      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6818      	ldr	r0, [r3, #0]
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	6859      	ldr	r1, [r3, #4]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	68db      	ldr	r3, [r3, #12]
 8002cde:	461a      	mov	r2, r3
 8002ce0:	f000 f89e 	bl	8002e20 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2140      	movs	r1, #64	; 0x40
 8002cea:	4618      	mov	r0, r3
 8002cec:	f000 f8f5 	bl	8002eda <TIM_ITRx_SetConfig>
      break;
 8002cf0:	e00c      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681a      	ldr	r2, [r3, #0]
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4619      	mov	r1, r3
 8002cfc:	4610      	mov	r0, r2
 8002cfe:	f000 f8ec 	bl	8002eda <TIM_ITRx_SetConfig>
      break;
 8002d02:	e003      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d04:	2301      	movs	r3, #1
 8002d06:	73fb      	strb	r3, [r7, #15]
      break;
 8002d08:	e000      	b.n	8002d0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002d0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2200      	movs	r2, #0
 8002d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d1e:	4618      	mov	r0, r3
 8002d20:	3710      	adds	r7, #16
 8002d22:	46bd      	mov	sp, r7
 8002d24:	bd80      	pop	{r7, pc}

08002d26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002d2e:	bf00      	nop
 8002d30:	370c      	adds	r7, #12
 8002d32:	46bd      	mov	sp, r7
 8002d34:	bc80      	pop	{r7}
 8002d36:	4770      	bx	lr

08002d38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002d40:	bf00      	nop
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	bc80      	pop	{r7}
 8002d48:	4770      	bx	lr

08002d4a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bc80      	pop	{r7}
 8002d5a:	4770      	bx	lr

08002d5c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d64:	bf00      	nop
 8002d66:	370c      	adds	r7, #12
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bc80      	pop	{r7}
 8002d6c:	4770      	bx	lr
	...

08002d70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b085      	sub	sp, #20
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	4a25      	ldr	r2, [pc, #148]	; (8002e18 <TIM_Base_SetConfig+0xa8>)
 8002d84:	4293      	cmp	r3, r2
 8002d86:	d007      	beq.n	8002d98 <TIM_Base_SetConfig+0x28>
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d8e:	d003      	beq.n	8002d98 <TIM_Base_SetConfig+0x28>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	4a22      	ldr	r2, [pc, #136]	; (8002e1c <TIM_Base_SetConfig+0xac>)
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d108      	bne.n	8002daa <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d9e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	68fa      	ldr	r2, [r7, #12]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a1a      	ldr	r2, [pc, #104]	; (8002e18 <TIM_Base_SetConfig+0xa8>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d007      	beq.n	8002dc2 <TIM_Base_SetConfig+0x52>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db8:	d003      	beq.n	8002dc2 <TIM_Base_SetConfig+0x52>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a17      	ldr	r2, [pc, #92]	; (8002e1c <TIM_Base_SetConfig+0xac>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d108      	bne.n	8002dd4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	68fa      	ldr	r2, [r7, #12]
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	4313      	orrs	r3, r2
 8002de0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	68fa      	ldr	r2, [r7, #12]
 8002de6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	689a      	ldr	r2, [r3, #8]
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a07      	ldr	r2, [pc, #28]	; (8002e18 <TIM_Base_SetConfig+0xa8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d103      	bne.n	8002e08 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	691a      	ldr	r2, [r3, #16]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2201      	movs	r2, #1
 8002e0c:	615a      	str	r2, [r3, #20]
}
 8002e0e:	bf00      	nop
 8002e10:	3714      	adds	r7, #20
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	40012c00 	.word	0x40012c00
 8002e1c:	40000400 	.word	0x40000400

08002e20 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e20:	b480      	push	{r7}
 8002e22:	b087      	sub	sp, #28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	60f8      	str	r0, [r7, #12]
 8002e28:	60b9      	str	r1, [r7, #8]
 8002e2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	6a1b      	ldr	r3, [r3, #32]
 8002e36:	f023 0201 	bic.w	r2, r3, #1
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e3e:	68fb      	ldr	r3, [r7, #12]
 8002e40:	699b      	ldr	r3, [r3, #24]
 8002e42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	011b      	lsls	r3, r3, #4
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4313      	orrs	r3, r2
 8002e54:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	f023 030a 	bic.w	r3, r3, #10
 8002e5c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e5e:	697a      	ldr	r2, [r7, #20]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	4313      	orrs	r3, r2
 8002e64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	693a      	ldr	r2, [r7, #16]
 8002e6a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	621a      	str	r2, [r3, #32]
}
 8002e72:	bf00      	nop
 8002e74:	371c      	adds	r7, #28
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr

08002e7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	b087      	sub	sp, #28
 8002e80:	af00      	add	r7, sp, #0
 8002e82:	60f8      	str	r0, [r7, #12]
 8002e84:	60b9      	str	r1, [r7, #8]
 8002e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6a1b      	ldr	r3, [r3, #32]
 8002e8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	f023 0210 	bic.w	r2, r3, #16
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	699b      	ldr	r3, [r3, #24]
 8002e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ea6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	031b      	lsls	r3, r3, #12
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002eb8:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	011b      	lsls	r3, r3, #4
 8002ebe:	697a      	ldr	r2, [r7, #20]
 8002ec0:	4313      	orrs	r3, r2
 8002ec2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	697a      	ldr	r2, [r7, #20]
 8002ece:	621a      	str	r2, [r3, #32]
}
 8002ed0:	bf00      	nop
 8002ed2:	371c      	adds	r7, #28
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	bc80      	pop	{r7}
 8002ed8:	4770      	bx	lr

08002eda <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b085      	sub	sp, #20
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ef0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002ef2:	683a      	ldr	r2, [r7, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	f043 0307 	orr.w	r3, r3, #7
 8002efc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	68fa      	ldr	r2, [r7, #12]
 8002f02:	609a      	str	r2, [r3, #8]
}
 8002f04:	bf00      	nop
 8002f06:	3714      	adds	r7, #20
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	bc80      	pop	{r7}
 8002f0c:	4770      	bx	lr

08002f0e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002f0e:	b480      	push	{r7}
 8002f10:	b087      	sub	sp, #28
 8002f12:	af00      	add	r7, sp, #0
 8002f14:	60f8      	str	r0, [r7, #12]
 8002f16:	60b9      	str	r1, [r7, #8]
 8002f18:	607a      	str	r2, [r7, #4]
 8002f1a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002f28:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	021a      	lsls	r2, r3, #8
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	431a      	orrs	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	697a      	ldr	r2, [r7, #20]
 8002f40:	609a      	str	r2, [r3, #8]
}
 8002f42:	bf00      	nop
 8002f44:	371c      	adds	r7, #28
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b085      	sub	sp, #20
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f5c:	2b01      	cmp	r3, #1
 8002f5e:	d101      	bne.n	8002f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002f60:	2302      	movs	r3, #2
 8002f62:	e041      	b.n	8002fe8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2202      	movs	r2, #2
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	68fa      	ldr	r2, [r7, #12]
 8002f92:	4313      	orrs	r3, r2
 8002f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	68fa      	ldr	r2, [r7, #12]
 8002f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4a14      	ldr	r2, [pc, #80]	; (8002ff4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d009      	beq.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb0:	d004      	beq.n	8002fbc <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a10      	ldr	r2, [pc, #64]	; (8002ff8 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d10c      	bne.n	8002fd6 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002fc2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2201      	movs	r2, #1
 8002fda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002fe6:	2300      	movs	r3, #0
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3714      	adds	r7, #20
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr
 8002ff2:	bf00      	nop
 8002ff4:	40012c00 	.word	0x40012c00
 8002ff8:	40000400 	.word	0x40000400

08002ffc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	bc80      	pop	{r7}
 800300c:	4770      	bx	lr

0800300e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800300e:	b480      	push	{r7}
 8003010:	b083      	sub	sp, #12
 8003012:	af00      	add	r7, sp, #0
 8003014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003016:	bf00      	nop
 8003018:	370c      	adds	r7, #12
 800301a:	46bd      	mov	sp, r7
 800301c:	bc80      	pop	{r7}
 800301e:	4770      	bx	lr

08003020 <__libc_init_array>:
 8003020:	b570      	push	{r4, r5, r6, lr}
 8003022:	2600      	movs	r6, #0
 8003024:	4d0c      	ldr	r5, [pc, #48]	; (8003058 <__libc_init_array+0x38>)
 8003026:	4c0d      	ldr	r4, [pc, #52]	; (800305c <__libc_init_array+0x3c>)
 8003028:	1b64      	subs	r4, r4, r5
 800302a:	10a4      	asrs	r4, r4, #2
 800302c:	42a6      	cmp	r6, r4
 800302e:	d109      	bne.n	8003044 <__libc_init_array+0x24>
 8003030:	f000 f822 	bl	8003078 <_init>
 8003034:	2600      	movs	r6, #0
 8003036:	4d0a      	ldr	r5, [pc, #40]	; (8003060 <__libc_init_array+0x40>)
 8003038:	4c0a      	ldr	r4, [pc, #40]	; (8003064 <__libc_init_array+0x44>)
 800303a:	1b64      	subs	r4, r4, r5
 800303c:	10a4      	asrs	r4, r4, #2
 800303e:	42a6      	cmp	r6, r4
 8003040:	d105      	bne.n	800304e <__libc_init_array+0x2e>
 8003042:	bd70      	pop	{r4, r5, r6, pc}
 8003044:	f855 3b04 	ldr.w	r3, [r5], #4
 8003048:	4798      	blx	r3
 800304a:	3601      	adds	r6, #1
 800304c:	e7ee      	b.n	800302c <__libc_init_array+0xc>
 800304e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003052:	4798      	blx	r3
 8003054:	3601      	adds	r6, #1
 8003056:	e7f2      	b.n	800303e <__libc_init_array+0x1e>
 8003058:	080030b4 	.word	0x080030b4
 800305c:	080030b4 	.word	0x080030b4
 8003060:	080030b4 	.word	0x080030b4
 8003064:	080030b8 	.word	0x080030b8

08003068 <memset>:
 8003068:	4603      	mov	r3, r0
 800306a:	4402      	add	r2, r0
 800306c:	4293      	cmp	r3, r2
 800306e:	d100      	bne.n	8003072 <memset+0xa>
 8003070:	4770      	bx	lr
 8003072:	f803 1b01 	strb.w	r1, [r3], #1
 8003076:	e7f9      	b.n	800306c <memset+0x4>

08003078 <_init>:
 8003078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307a:	bf00      	nop
 800307c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800307e:	bc08      	pop	{r3}
 8003080:	469e      	mov	lr, r3
 8003082:	4770      	bx	lr

08003084 <_fini>:
 8003084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003086:	bf00      	nop
 8003088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308a:	bc08      	pop	{r3}
 800308c:	469e      	mov	lr, r3
 800308e:	4770      	bx	lr
